<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DDL on Hackerpie</title><link>https://blog.hackerpie.com/tags/ddl/</link><description>Recent content in DDL on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 12 Dec 2024 22:26:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/ddl/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL 数据库删除外键约束引发的死锁问题</title><link>https://blog.hackerpie.com/posts/postgresql/deadlock-due-to-remove-constrait/</link><pubDate>Thu, 12 Dec 2024 22:26:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/postgresql/deadlock-due-to-remove-constrait/</guid><description>&lt;p>上周将一个大功能发布到了线上环境，但是在半个多小时后收到数据库从库（我们使用的是 PostgreSQL 数据库）CPU 使用率接近 100% 的告警，同时 APM 监控表明部分 API 响应时间明显变长，并且相关 API 的错误追踪里会看到 Statement Timeout 错误。经过版本回滚后，数据库和服务恢复正常。后面是漫长的根因分析的过程，而最后我们确定的原因，竟是一个 Rails migration 触发（注意不是导致，因为死锁还得找到和它形成相互等待的另一方，双方同时运行才能导致死锁）的从库死锁，比较有意思，总结一下，跟各位分享。&lt;/p>
&lt;h2 id="为什么从库也有死锁">为什么从库也有死锁？&lt;/h2>
&lt;p>按照过去仅有的认知，我只知道死锁在主库中更为常见，因为死锁通常发生在两个冲突的事务之间，而一般只有主库才会有大量事务同时运行，而从库由于只需要同步主库的日志进行顺序回放即可，理论上不存在并发的事务。&lt;/p>
&lt;p>但是我们的死锁发生在了从库，这是一个让人感觉有点匪夷所思的问题。&lt;/p>
&lt;h2 id="根因ddl-与高并发的-select--from-a-join-b--查询形成死锁">根因：DDL 与高并发的 &lt;code>SELECT ... FROM A JOIN B ...&lt;/code> 查询形成死锁&lt;/h2>
&lt;p>经过死锁日志的分析，我们发现每次死锁出现时，都有类似以下模式的联表查询语句在等待同一个线程锁定的资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">SELECT&lt;/span> users.id, users.name, cars.brand, ... &lt;span style="font-weight:bold">FROM&lt;/span> users &lt;span style="font-weight:bold">LEFT&lt;/span> &lt;span style="font-weight:bold">OUTER&lt;/span> &lt;span style="font-weight:bold">JOIN&lt;/span> cars &lt;span style="font-weight:bold">ON&lt;/span> cars.owner_id = users.id &lt;span style="font-weight:bold">WHERE&lt;/span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>（以上 SQL 中的表名和列名为示例，非真实表名列名）&lt;/p>
&lt;p>完整的日志类似：&lt;/p>
&lt;pre tabindex="0">&lt;code>[12345]:ERROR: deadlock detected at character 234
Process 12345 waits for AccessShareLock on relation 2 of database 789; blocked by process 911.
	Process 911 waits for AccessExclusiveLock on relation 1 of database 789; blocked by process 12345.
	Process 12345: SELECT users.id, users.name, cars.brand, ... FROM users LEFT OUTER JOIN cars ON cars.owner_id = users.id WHERE ...
	Process 911: &amp;lt;backend information not available&amp;gt;
&lt;/code>&lt;/pre>&lt;p>通过查询 PostgreSQL 数据库的元数据表，还原出 relation=1 对应表名是 &lt;code>users&lt;/code>，而 relation=2 对应表名是 &lt;code>cars&lt;/code>。
所以：&lt;/p></description></item></channel></rss>