<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>部分应用 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8/</link><description>Recent content in 部分应用 on Hackerpie</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 15 Aug 2021 21:18:18 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E9%83%A8%E5%88%86%E5%BA%94%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>部分应用与柯理化</title><link>https://blog.hackerpie.com/posts/programming-paradigm/partial-application-and-currying/</link><pubDate>Sun, 15 Aug 2021 21:18:18 +0800</pubDate><guid>https://blog.hackerpie.com/posts/programming-paradigm/partial-application-and-currying/</guid><description>在最近学习函数式编程的过程中，反复接触到的就是“柯理化”这个概念，特别数学范有没有？虽然看过多次，但是一直不是很好地理解它，恰逢今天在阅读《Scala 函数式编程》这本书的过程中加深了理解，便写个文章，总结一下。
柯理化 柯理化，英文叫“Currying”，命名源自逻辑学家 Haskell Curry 的名字。在数学和编程领域，柯理化用于将一个接收多个参数的函数转换为一系列只接收单个输入参数的函数。比如，将一个接收三个参数的函数 f 进行柯理化，会得到三个新的函数：
x = f(a, b, c) 变为： h = g(a) i = h(b) x = i(c) 或者使用匿名函数按序调用的形式，则为： x = g(a)(b)(c) 这样讲或许仍有点不好理解，我们用个数学函数的例子来分解。假如我们有函数 f(a, b, c) = a² + b - c，并且有 a = 2、b = 3、c = 1，则一般数学求解过程中，我们可以直接将 a、b、c 的值对应代入函数右侧式子，得到 2² + 3 - 1 = 6，于是我们知道 f(2, 3, 1) = 6。这个过程很直观很好理解，也很亲切对不对？
但是，假如我们要求每次只能代入函数的一个输入值，会是怎样的过程呢？
第一步，我们代入 a = 2，我们将得到 f(2, b, c) = 2² + b - c，我们可以记 g(b, c) = f(2, b, c) = 4 + b - c； 第二步，我们代入 b = 3，我们得到 g(3, c) = 4 + 3 - c，我们可以记 h(c) = g(3, c) = 7 - c； 最后一步，我们代入 c = 1，我们得到 h(1) = 7 - 1 = 6。 上述的过程，向我们展示了我们是如何通过每次代入一个输入值而得到一个输入值数量减 1 的新函数。</description></item></channel></rss>