<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>动态语言 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/</link><description>Recent content in 动态语言 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 22 Sep 2019 19:48:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>谨防猴子补丁以及Python中排查技巧</title><link>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</link><pubDate>Sun, 22 Sep 2019 19:48:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>前两天晚上线上系统突发故障，在立马打开线上错误日志之后，却只能得到一堆毫无意义的程序调用栈(traceback)的输出，于是团队成员陷入漫长而又抓瞎的问题排查过程中。问题很幸运地得到了解决，但是我一直想不明白为什么日志里打印的调用栈毫无意义，按照经验，它应该打印的是异常产生过程中的调用栈才是。在经过后续的源码分析和排查之后，我才发现其实是因为项目中一个老旧的代码使用了&lt;strong>猴子补丁&lt;/strong>导致，这也是这篇文章想要讨论的内容。&lt;/p>
&lt;h3 id="什么是猴子补丁">什么是猴子补丁&lt;/h3>
&lt;p>猴子补丁是一种用来在运行时修改（增加、变更、删除等）系统软件行为的编程方式。在动态语言里有广泛的猴子补丁应用的影子，比如 Ruby 的打开类的特性支持运行时扩展类的定义甚至替换方法的实现，Python 的方法或者函数由于可以在运行时进行替换而使得猴子补丁的应用非常方便，其他像 JavaScript 语言同样可以应用猴子补丁。&lt;/p>
&lt;h4 id="猴子补丁是把双刃剑">猴子补丁是把双刃剑&lt;/h4>
&lt;p>猴子补丁以其灵活性，可以实现补丁代码和应用代码的完全分离，同时使得应用代码在调用方式上保持调用方式始终不变。
从应用代码的角度来看，它调用的就是某个模块的原始定义的方法或者函数；而从被调用的方法或者函数的角度来看，猴子补丁的存在对它是透明的存在，以下展示一个 Python 语言的 Demo：&lt;/p>
&lt;p>我们从一个极简例子开始，向这个美好的世界问好：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如执行以上脚本，得到的结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ python demo.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个很简单，接下来假如打一个猴子补丁：我们扩充原来的 &lt;code>greet&lt;/code> 的行为，现在除了打印信息，还要打印下当前的时间：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">from&lt;/span> &lt;span style="font-weight:bold">datetime&lt;/span> &lt;span style="font-weight:bold">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>original_greet = greet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet_with_time():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_greet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(datetime.now())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet = greet_with_time &lt;span style="font-style:italic"># replace the implementation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet() &lt;span style="font-style:italic"># 这里的调用和原来没有变化&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行它，得到的结果是：&lt;/p></description></item></channel></rss>