<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spree on Hackerpie</title><link>https://blog.hackerpie.com/tags/spree/</link><description>Recent content in Spree on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 28 Jul 2014 21:32:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/spree/index.xml" rel="self" type="application/rss+xml"/><item><title>Spree 2.3.0已经发布</title><link>https://blog.hackerpie.com/posts/archive/spree-2-dot-3-0yi-jing-fa-bu/</link><pubDate>Mon, 28 Jul 2014 21:32:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/spree-2-dot-3-0yi-jing-fa-bu/</guid><description>&lt;p>**声明：**原文来自Spree官方博客&lt;a href="http://spreecommerce.com/blog/spree-2-3-released">Spree 2.3.0 Released&lt;/a>，原文发布日期是2014-06-30，本文仅作翻译。&lt;/p>
&lt;p>&lt;strong>简要介绍：&lt;/strong>&lt;a href="http://spreecommerce.com/">Spree&lt;/a>是一个基于&lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a>开发的开源在线商城框架，提供了从商品展示购买、下单支付到库存管理以及订单管理等一系列基本功能，并且支持通过第三方扩展的形式定制或者扩展框架的功能，最新版本的Spree已经支持最新的Rails版本。&lt;/p>
&lt;p>Spree 2.3的最新更改已经加入对Rails 4.1的支持，提供了更好的配置项的存储，更好的针对多店铺的支持，以及更好的游客追踪。Spree 2.3的发布，有赖于总的97位贡献者以及他们总的700多个的commit记录。现在，我们非常兴奋地宣布：Spree 2.3发布了！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="rails-41-的支持">Rails 4.1 的支持&lt;/h3>
&lt;p>现在，Rails 4.1已经得到了Spree 2.3的支持。如果你希望基于Rails 4.1进行开发，那么Spree 2.3就是特为你准备的发布版。&lt;/p>
&lt;h3 id="基于序列化记录的配置项">基于序列化记录的配置项&lt;/h3>
&lt;p>现在，所有的配置项存储在一个记录上，而不是存储在&lt;code>spree_preferences&lt;/code>表中。这意味着，为了获取一个配置项，比如价格的计算器配置，就会触发一个数据库查询，所查询的那一行记录有一个包含了所有配置信息的命名为&lt;code>preferences&lt;/code>的列。&lt;/p>
&lt;p>而在此之前，对于每一个配置记录本身，可能都会有一个单独的数据库调用，而在查询到所请求的配置项之后，还是有可能会有任意数目的数据库调用产生。而现在，我们总的只需要调用一次，这意味着程序本身将会有一些速度上的提升。&lt;/p>
&lt;h3 id="更好的多店铺支持">更好的多店铺支持&lt;/h3>
&lt;p>我们已经添加了一个名为&lt;code>Spree::Store&lt;/code>的model，用于支持基本的多店铺/多域名的站点。其在&lt;code>spree-multi-domain&lt;/code>这个扩展的基础上提供了针对多店铺/多域名的基本框架。一些原有的配置项被转移到了这个model上，以此实现根据具体的店铺提供不同配置值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Spree::Config[:site_name]&lt;/code> 迁移到了 &lt;code>name&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:site_url]&lt;/code> 迁移到了 &lt;code>url&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_meta_description]&lt;/code> 迁移到了 &lt;code>meta_description&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_meta_keywords]&lt;/code> 迁移到了 &lt;code>meta_keywords&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_seo_title]&lt;/code> 迁移到了 &lt;code>seo_title&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个数据库迁移文件将会负责把这些原有的配置项转移到一个新的默认的store实例上。&lt;/p>
&lt;p>一个新的名为&lt;code>ControllerHelpers::Store&lt;/code>的Concern提供了一个&lt;code>current_store&lt;/code>helper，可以在请求的域名的基础上，通过它获取当前店铺。&lt;/p>
&lt;h3 id="更好的游客追踪">更好的游客追踪&lt;/h3>
&lt;p>现在，我们用了一个签名的cookie在浏览器中存储游客的唯一的token。通过它允许关闭了浏览器的顾客可以在再次访问时继续完成他们的购物流程。更重要的是，这也帮助作为商店主人的你方便地识别游客的订单。由于我们在访客来访时都会设置&lt;code>cookies.signed[:guest_token]&lt;/code>，所以除了订单，或许你可以把cookie用于其他用途。&lt;/p>
&lt;p>举个实际例子，如果游客需要收藏一个商品，你可以创建一个用于记录收藏记录的model，然后把&lt;code>cookies.signed[:guest_token]&lt;/code>赋值给这个model中的&lt;code>token&lt;/code>字段。这将有助于你分析当前用户在此之前的订单以及收藏记录，这对于商品推荐将是非常有用的。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>你可以从&lt;a href="https://github.com/spree/spree/releases/tag/v2.3.0">Github&lt;/a>上浏览更详细的变更列表。&lt;/p></description></item></channel></rss>