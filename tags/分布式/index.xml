<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link><description>Recent content in 分布式 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 28 Oct 2020 19:48:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>《Paxos Made Simple》中文翻译：Paxos 如此简单</title><link>https://blog.hackerpie.com/posts/2020/paxos-made-simple-translation/</link><pubDate>Wed, 28 Oct 2020 19:48:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2020/paxos-made-simple-translation/</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>个人在学习理解 Paxos 算法的过程中，花了比较多的时间，从最开始直接查看中文博客资料，感觉都是看完不知所以然或者有很多疑问，于是决定死磕《Paxos Made Simple》论文原文。但是由于有些英文的意思我自己理解起来还是有点困惑，于是过程中遇到无法理解的内容，一方面是会翻阅前辈们已经写过的论文的翻译作为参考，二是在搜索引擎里就一些难以理解的点搜索中英文的讨论，以此解决自己心中的困惑。在磕磕碰碰中完成论文的阅读之后，仍有一些不尽透彻之处，加上个人认为此论文已有的翻译质量参差不齐，所以斗胆想通过翻译以及必要译注再次加深自己的理解，另外可能的话，也希望本次翻译能够帮助到未来可能会遇到和我一样困惑的人。&lt;/p>
&lt;h3 id="部分关键术语表">部分关键术语表&lt;/h3>
&lt;p>论文中有一些关键术语，我已经力求用词准确，并在论文中尽力保持术语翻译的一致性，目的是尽量充分传达论文本身用词的精准，建议读者可先仔细阅读此表。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>原文术语&lt;/th>
 &lt;th>翻译中使用术语&lt;/th>
 &lt;th>译者注&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>value(s)&lt;/td>
 &lt;td>值&lt;/td>
 &lt;td>值可能比较抽象，觉得太抽象的读者建议理解为提案的“内容”亦可&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>learn&lt;/td>
 &lt;td>获知&lt;/td>
 &lt;td>有些文章译作“了解”或者“学习”，但是这里反复斟酌，还是觉得“获知”更贴切，目的性更强烈&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>propose&lt;/td>
 &lt;td>提议&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>chosen&lt;/td>
 &lt;td>选定&lt;/td>
 &lt;td>一个被选定的值，意味着一个被“一致”确认下来的值&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>agent&lt;/td>
 &lt;td>代理&lt;/td>
 &lt;td>依旧觉得翻译成“代理”过于字面化&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>proposer(s)&lt;/td>
 &lt;td>提议者&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>acceptor(s)&lt;/td>
 &lt;td>接受者&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>learner(s)&lt;/td>
 &lt;td>学习者&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>fail / failure&lt;/td>
 &lt;td>失效/故障&lt;/td>
 &lt;td>意味着系统已经完全不能工作&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>proposal&lt;/td>
 &lt;td>提案&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>accept&lt;/td>
 &lt;td>接受&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>number&lt;/td>
 &lt;td>编号&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>distinguished&lt;/td>
 &lt;td>特定的&lt;/td>
 &lt;td>文中用于形容某个经过选举而被选中的角色&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="翻译全文">翻译全文&lt;/h2>
&lt;h3 id="paxos-如此简单">Paxos 如此简单&lt;/h3>
&lt;p>2001年11月1日&lt;/p>
&lt;h3 id="摘要">摘要&lt;/h3>
&lt;p>当用浅显易懂的英语来表达的话，Paxos 是非常简单的。&lt;/p>
&lt;h3 id="1-导引">1 导引&lt;/h3>
&lt;p>Paxos 算法——一个用于实现一个容忍错误的分布式系统的算法，让很多人觉得难以理解，这可能是因为对于很多读者们而言，原来的表述太过于让人摸不着头脑&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>了。事实上，它是最简单浅显的分布式算法。它的核心是一个一致性算法——“synod”算法&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。在下一节中，将会看到这个一致性算法不可避免地遵循一些我们希望它能够满足的特性。最后一节阐述了完整的 Paxos 算法，这个算法是通过将一致性（的实现）直接应用到用于构建分布式系统的（多副本）状态机&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>这种方法中得到的——这种所谓的方法应该是众所周知的，因为它是分布式系统理论中最常被引用的论文的主题。&lt;/p>
&lt;h3 id="2-一致性算法">2 一致性算法&lt;/h3>
&lt;h4 id="21-问题描述">2.1 问题描述&lt;/h4>
&lt;p>假设有一个由多个进程组成的集合，集合里的每个进程都可以提议（可能不同的）值&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>。一致性算法保证在被提议的这些值中只有一个值能够被选定。一旦一个值被选定，则所有进程都需要能够获知（learn）这个被选定的值。一致性的安全性要求做到：&lt;/p></description></item></channel></rss>