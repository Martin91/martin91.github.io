<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RPC on Hackerpie</title><link>https://blog.hackerpie.com/tags/rpc/</link><description>Recent content in RPC on Hackerpie</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 19 Dec 2023 20:01:18 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/rpc/index.xml" rel="self" type="application/rss+xml"/><item><title>tRPC-Go 框架核心实现源码解读与应用</title><link>https://blog.hackerpie.com/posts/architecture/trpc-go-framework-source-and-application/</link><pubDate>Tue, 19 Dec 2023 20:01:18 +0800</pubDate><guid>https://blog.hackerpie.com/posts/architecture/trpc-go-framework-source-and-application/</guid><description>概述 tRPC 是一套由腾讯开源的高性能、跨多种编程语言、插件化的 RPC 框架。tRPC-Go 是框架在 Golang 编程语言下的官方实现。
本文剖析 tRPC-Go 框架的核心实现原理，并非 tRPC-Go 框架快速入门教程，所以不会有框架使用方法方面的介绍。
本文假设的读者是已经有一定的 tRPC-Go 框架使用经验或对 tRPC-Go 框架设计有基本了解的同学，我希望这篇文章能对想要更深入了解框架原理的同学提供有效的帮助。
通过阅读本文，你将可以：
熟悉 tRPC-Go 框架核心模块设计原理 以框架的核心流程为脉络自行延伸了解其他重要模块实现原理 注意：本文写作时，对应的 tRPC-go 框架版本是 v0.12.0。
tRPC-Go 架构速览 在一头扎进 tRPC-Go 核心组件的设计原理之前，我们先看看 tRPC-Go 框架的整体架构设计，这个架构图大家可以从 tRPC-Go 框架的官方文档中查到。
总体框架设计 tRPC-Go 框架的最大设计亮点是清晰的组件划分以及高度的灵活性、可扩展性。
组件划分方面，框架在设计中考虑到了微服务治理中的常见问题，包括服务注册发现、分布式链路追踪以及服务可观测性等，对应到框架，其定义了 Metrics、Tracing、Selector、Conf 以及 Log 等组件；而 Codec 和 Transport 等组件则是 RPC 调用通信过程的标准化。
在灵活性和可扩展性的考量上，框架利用插件化设计思想，框架的核心组件均可以通过实现框架定义的各个接口来实现业务定制与扩展，我们在日常开发中，最容易接触到的就是各种各样的拦截器，这些都为 tRPC-Go 兼容腾讯内部已有各种协议与框架奠定了基础。
在这篇文章中，大家将会看到框架在 Codec 、Log 以及 Tracing 等方面的设计实现。
tRPC-Go 框架核心模块及应用详解 学习一个框架，最有效的方法就是先掌握它最基本的业务过程，其次再从各个流程分叉点延伸到各个角落，这样才不会在框架大量的代码中迷失了方向。对于一个网络应用框架而言，进程间的通信过程就是它最基本的业务过程。来一个非常熟悉的例子：一个 HTTP 请求从浏览器端发送到服务器端完成响应，再返回到浏览器端，发生了什么？当然不要怕，这个问题无需回答，放松。我只是为了提出我们今天的第一个问题：
一次 RPC 调用的核心过程是怎样的？需要经过哪些环节的处理？
一次 RPC 调用的核心过程 HTTP 客户端和服务器端双方想要通信，客户端需要先完成 HTTP 请求头和请求正文的组装，以及域名的解析，获得 IP 地址后，根据请求的 IP 和端口，交由传输层完成请求的传输；而服务器端在收到请求后，需要完成请求信息的结构化解析，然后执行相应的动作，最后同样通过传输层返回响应的头和正文给到浏览器端。</description></item></channel></rss>