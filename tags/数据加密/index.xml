<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据加密 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</link><description>Recent content in 数据加密 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 20 Mar 2022 13:53:20 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/index.xml" rel="self" type="application/rss+xml"/><item><title>数据库数据加密的 4 种常见思路的对比</title><link>https://blog.hackerpie.com/posts/architecture/data-encrpytion/</link><pubDate>Sun, 20 Mar 2022 13:53:20 +0800</pubDate><guid>https://blog.hackerpie.com/posts/architecture/data-encrpytion/</guid><description>&lt;p>最近由于工作需要，我对欧洲的通用数据保护条例做了调研和学习，其中有非常重要的一点，也是常识性的一条，就是需要对用户的个人隐私数据做好加密存储，避免用户隐私明文数据泄露。&lt;/p>
&lt;h1 id="方案分析">方案分析&lt;/h1>
&lt;p>思考如何对用户隐私数据做好加密处理，可以先从分析典型的数据读写链路开始：&lt;/p>
&lt;pre tabindex="0">&lt;code> _________ query _________ read _________
 | | ----------------&amp;gt; | | ----------------&amp;gt; | |
 | 应用 | | DB | | Disk |
 | | &amp;lt;================ | | &amp;lt;================ | |
 --------- rows --------- data page ---------
&lt;/code>&lt;/pre>&lt;p>按照此链路分析，可以按照数据加密的着手点，划分数据加密的 4 类解决方案：&lt;/p>
&lt;ul>
&lt;li>应用层加解密：由应用程序自行负责数据的加解密，这是最自由，但也是最繁琐的一种方案；&lt;/li>
&lt;li>DB 前置处理：在数据库服务器开始服务之前嵌入加密逻辑，典型代表是数据库代理服务；&lt;/li>
&lt;li>磁盘存取环节：这种方案的基本思路则是绕到数据库的身后，在文件系统中注入钩子进程，这样可以在磁盘数据读写之前嵌入加密逻辑，一般&lt;/li>
&lt;li>DB 后置处理：在数据库服务之后嵌入加密逻辑，依赖数据库提供的触发器以及函数定制功能等。&lt;/li>
&lt;/ul>
&lt;p>下面就这几类方案展开分析。&lt;/p>
&lt;h2 id="应用层加解密方案">应用层加解密方案&lt;/h2>
&lt;p>采用这种方案的话，数据加解密对数据库无感知，由应用在存入数据前完成加密，在读取数据后完成解密。这种方案的优点是：&lt;/p>
&lt;ul>
&lt;li>迁移性好：因为不依赖任何数据库特性或者操作系统特性，只需要部署代码即可运行；&lt;/li>
&lt;li>实现灵活：逻辑放在应用层，各种定制或者扩展都非常方便进行，可以轻松实现按表/按列的加密存储。&lt;/li>
&lt;/ul>
&lt;p>当时，缺点也非常明显：&lt;/p>
&lt;ul>
&lt;li>影响使用数据库高级特性：比如数据库索引以及执行计划等;&lt;/li>
&lt;li>大幅影响数据库查询性能：比如 Like 的前缀查询以及 Where 的范围查询等，都会因为数据加密后而只能全表扫描；&lt;/li>
&lt;li>开发维护成本高：每次新增需要加解密数据时都需要对应完成开发调试与测试，开发人员在应用里既要关注核心业务逻辑，还要关注大量的数据加解密的逻辑，当有多个应用或者系统需要集成加解密功能时，每个应用或者系统都需要重复建设此能力。&lt;/li>
&lt;/ul>
&lt;p>在应用层实现加解密方案的话，实现上可以考虑结合各类 orm 的回调函数机制，如 golang 中流行的 ORM 框架 gorm 所提供的 Callbacks 机制，又或者是 Ruby on Rails 框架中 Active Record 的 Callbacks 机制，这些机制都能有效帮助我们将业务代码和控制代码进行相互隔离。&lt;/p></description></item></channel></rss>