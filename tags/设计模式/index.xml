<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 03 Mar 2014 13:40:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>解读Rails - 适配器模式</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</link><pubDate>Mon, 03 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</guid><description>&lt;p>本文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_the_adapter_pattern/?utm_source=rubyweekly&amp;amp;utm_medium=email">Reading Rails - The Adapter Pattern&lt;/a>，限于本人水平有限，翻译不当之处，敬请指教！&lt;/p>
&lt;p>今天我们暂时先放下具体的代码片段，我们将要对Rails中所实现的一个比较常见的设计模式进行一番探索，这个模式就是&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式（Adapter Pattern）&lt;/a>。从一定的意义上来说，这次的探索并不全面，但是我希望能够突出一些实际的例子。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>为了跟随本文的步骤，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开相关的代码库，或者直接在&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">Github&lt;/a>上查看这些代码。&lt;/p>
&lt;h3 id="适配器模式">适配器模式&lt;/h3>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式&lt;/a>可以用于对不同的接口进行包装以及提供统一的接口，或者是让某一个对象看起来像是另一个类型的对象。在静态类型的编程语言里，我们经常使用它去满足类型系统的特点，但是在类似Ruby这样的弱类型编程语言里，我们并不需要这么做。尽管如此，它对于我们来说还是有很多意义的。&lt;/p>
&lt;p>当使用第三方类或者库的时候，我们经常从这个例子开始（start out fine）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们假设有一个针对&lt;code>locator&lt;/code>的接口，但是如果我们想要&lt;code>find_nearest_restaurant&lt;/code>能够支持另一个库呢？这个时候我们可能就会去尝试添加新的特殊的场景的处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> locator.is_a? GeoFish
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">elsif&lt;/span> locator.is_a? ActsAsFound
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find_food(&lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat, &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">raise&lt;/span> NotImplementedError, &lt;span style="font-style:italic">&amp;#34;&lt;/span>&lt;span style="font-weight:bold;font-style:italic">#{&lt;/span>locator.class.name&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic"> is not supported.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个比较务实的解决方案。或许我们也不再需要考虑去支持另一个库了。也或许&lt;code>find_nearest_restaurant&lt;/code>就是我们使用&lt;code>locator&lt;/code>的唯一场景。&lt;/p>
&lt;p>那假如你真的需要去支持一个新的&lt;code>locator&lt;/code>，那又会是怎么样的呢？那就是你有三个特定的场景。再假如你需要实现&lt;code>find_nearest_hospital&lt;/code>方法呢？这样你就需要在维护这三种特定的场景时去兼顾两个不同的地方。当你觉得这种解决方案不再可行的时候，你就需要考虑适配器模式了。&lt;/p>
&lt;p>在这个例子中，我们可以为&lt;code>GeoFish&lt;/code>以及&lt;code>ActsAsFound&lt;/code>编写适配器，这样的话，在我们的其他代码中，我们就不需要了解我们当前正在使用的是哪个库了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find &lt;span style="font-style:italic">:type&lt;/span> =&amp;gt; &lt;span style="font-style:italic">:hospital&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>locator = GeoFishAdapter.new(geo_fish_locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>特意假设的例子就到此为止，接下来让我们看看真实的代码。&lt;/p></description></item></channel></rss>