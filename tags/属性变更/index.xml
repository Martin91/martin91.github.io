<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>属性变更 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%B1%9E%E6%80%A7%E5%8F%98%E6%9B%B4/</link><description>Recent content in 属性变更 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 07 Mar 2014 13:02:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%B1%9E%E6%80%A7%E5%8F%98%E6%9B%B4/index.xml" rel="self" type="application/rss+xml"/><item><title>跟踪model中属性（值）的变更</title><link>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</link><pubDate>Fri, 07 Mar 2014 13:02:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</guid><description>此文翻译自Reading Rails - Change Tracking，限于本人水平，翻译不当之处，敬请指教！
我们今天来看看Rails是如何追踪model里边属性的变更的。
person = Person.find(8) person.name = &amp;#34;Mortimer&amp;#34; person.name_changed? #=&amp;gt; true person.name_was #=&amp;gt; &amp;#34;Horton&amp;#34; person.changes #=&amp;gt; {&amp;#34;name&amp;#34;=&amp;gt;[&amp;#34;Horton&amp;#34;,&amp;#34;Mortimer&amp;#34;]} person.save! person.changes #=&amp;gt; {} name_changed?方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。
如果需要跟着我的步骤走，请使用qwandry打开每一个相关的代码库，或者直接从github查看源码即可。
ActiveModel 当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（提示： 命令行中键入qw activemodel查看代码）定义了没有与数据库捆绑的逻辑。我们将从dirty.rb文件开始。在这个模块最开始的地方，代码调用了attribute_method_suffix：
module Dirty extend ActiveSupport::Concern include ActiveModel::AttributeMethods included do attribute_method_suffix &amp;#39;_changed?&amp;#39;, &amp;#39;_change&amp;#39;, &amp;#39;_will_change!&amp;#39;, &amp;#39;_was&amp;#39; #... attribute_method_suffix定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似_changed?后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到def attribute_changed?：
def attribute_changed?(attr) changed_attributes.include?(attr) end 我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似name_changed?的方法时，Rails将会把&amp;quot;name&amp;quot;作为参数attr传给上述方法。往回看一点点，你会发现changed_attributes只是一个包含了从属性名到旧的属性值的映射的Hash而已：
# Returns a hash of the attributes with unsaved changes indicating their original # values like &amp;lt;tt&amp;gt;attr =&amp;gt; original value&amp;lt;/tt&amp;gt;.</description></item></channel></rss>