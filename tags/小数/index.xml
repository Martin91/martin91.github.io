<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>小数 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%B0%8F%E6%95%B0/</link><description>Recent content in 小数 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 02 Mar 2022 18:31:18 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%B0%8F%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL + go 如何安全处理 decimal 类型数据</title><link>https://blog.hackerpie.com/posts/mysql/handle-decimal-fields/</link><pubDate>Wed, 02 Mar 2022 18:31:18 +0800</pubDate><guid>https://blog.hackerpie.com/posts/mysql/handle-decimal-fields/</guid><description>在电商或者金融相关的场景中，商品价格等数据都会涉及到小数的表示或者计算，如果使用编程语言内置的浮点数类型，会有精度丢失的风险。在应用领域，decimal 类型应运而生，MySQL 数据库中内置支持 decimal 数据类型，而程序设计上，一般编程语言都会有标准库或者第三方库对 decimal 类型提供实现。本文快速展示下如何实现全链路对 decimal 类型数据的读取处理，而不用担心会丢失数据的精度。
数据库层 - MySQL 在 MySQL 层，decimal 类型的值使用二进制表示，其大致转换过程是：
将待存储的数据按照整数和小数部分一分为二，比如 1234567890.1234，分为 1234567890 和 1234； 针对整数部分，从低位到高位，按照每 9 位数字为一组，进行分割，比如 1234567890 将分为 1 和 234567890； 使用最短字节序列分别表示每个分组的整数，上面的 1 即 0b00000001，而 234567890 则对应 0x0D-FB-38-D2； 对于小数部分，使用类似的分组（从高位到低位）处理方式，即 1234 表示为 0x04D2； 最后，将最高位置反，得到 0x81 0D FB 38 D2 04 D2，也就是使用了 7 个字节来表示这个数字。 Bonus: 如果是小数，比如 -1234567890.1234，则只需要将上面第 5 步的所有位置反即可，也就是 0x7E F2 04 C7 2D FB 2D
小结 MySQL 通过设计巧妙的可变长度的二进制转换，实现了对严格要求精度的小数的表示。
网络传输层 - MySQL 存储在 MySQL 底层存储上的 decimal，我们知道是二进制了之后，也就对精度问题的持久化存储放心了，但是，又带来两个问题：</description></item></channel></rss>