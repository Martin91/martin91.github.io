<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>解读Rails on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E8%A7%A3%E8%AF%BBrails/</link><description>Recent content in 解读Rails on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 12 Mar 2014 20:58:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E8%A7%A3%E8%AF%BBrails/index.xml" rel="self" type="application/rss+xml"/><item><title>属性方法</title><link>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</link><pubDate>Wed, 12 Mar 2014 20:58:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</guid><description>此文翻译自Reading Rails - Attribute Methods，限于本人水平，翻译不当之处，敬请指教！
在我们上一篇的探讨中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似attribute_method_suffix这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似name这样的模型属性以及对应生成的类似name_changed?这样的方法的。
如果需要跟着我的步骤走，请使用qwandry打开每一个相关的代码库，或者直接从github查看源码即可。
声明（Declarations） 属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，attribute_method_suffix后缀式方法是一个为每个属性都定义了一个helper方法的方法。在之前的讨论中，ActiveModel使用这种方式为您的每一个属性都定义了一个_changed?方法(提示： 命令行中键入qw activemodel查看代码)：
module Dirty extend ActiveSupport::Concern include ActiveModel::AttributeMethods included do attribute_method_suffix &amp;#39;_changed?&amp;#39;, &amp;#39;_change&amp;#39;, &amp;#39;_will_change!&amp;#39;, &amp;#39;_was&amp;#39; #... 让我们打开ActiveModel库中的attribute_methods.rb文件，并且看一下到底发生了什么事情。
def attribute_method_suffix(*suffixes) self.attribute_method_matchers += suffixes.map! do |suffix| AttributeMethodMatcher.new suffix: suffix end #... end 当你调用attribute_method_suffix方法的时候，每一个后缀都通过map!方法转换为一个AttributeMethodMatcher对象。这些对象会被存储在attribute_method_matchers中。如果你重新看一下这个module的顶部，你会发现attribute_method_matchers是在每一个包含此module的类中使用class_attribute定义的方法：
module AttributeMethods extend ActiveSupport::Concern included do class_attribute :attribute_aliases, :attribute_method_matchers, instance_writer: false #... class_attribute方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：
class Person class_attribute :database #... end class Employee &amp;lt; Person end Person.database = Sql.new(:host=&amp;gt;&amp;#39;localhost&amp;#39;) Employee.database #=&amp;gt; &amp;lt;Sql:host=&amp;#39;localhost&amp;#39;&amp;gt; Ruby中并没有class_attribute的内置实现，它是在ActiveSupport(提示:命令行中键入qw activesupport查看代码)中定义的方法。如果你对此比较好奇，可以简单看下attribute.</description></item><item><title>跟踪model中属性（值）的变更</title><link>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</link><pubDate>Fri, 07 Mar 2014 13:02:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</guid><description>此文翻译自Reading Rails - Change Tracking，限于本人水平，翻译不当之处，敬请指教！
我们今天来看看Rails是如何追踪model里边属性的变更的。
person = Person.find(8) person.name = &amp;#34;Mortimer&amp;#34; person.name_changed? #=&amp;gt; true person.name_was #=&amp;gt; &amp;#34;Horton&amp;#34; person.changes #=&amp;gt; {&amp;#34;name&amp;#34;=&amp;gt;[&amp;#34;Horton&amp;#34;,&amp;#34;Mortimer&amp;#34;]} person.save! person.changes #=&amp;gt; {} name_changed?方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。
如果需要跟着我的步骤走，请使用qwandry打开每一个相关的代码库，或者直接从github查看源码即可。
ActiveModel 当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（提示： 命令行中键入qw activemodel查看代码）定义了没有与数据库捆绑的逻辑。我们将从dirty.rb文件开始。在这个模块最开始的地方，代码调用了attribute_method_suffix：
module Dirty extend ActiveSupport::Concern include ActiveModel::AttributeMethods included do attribute_method_suffix &amp;#39;_changed?&amp;#39;, &amp;#39;_change&amp;#39;, &amp;#39;_will_change!&amp;#39;, &amp;#39;_was&amp;#39; #... attribute_method_suffix定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似_changed?后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到def attribute_changed?：
def attribute_changed?(attr) changed_attributes.include?(attr) end 我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似name_changed?的方法时，Rails将会把&amp;quot;name&amp;quot;作为参数attr传给上述方法。往回看一点点，你会发现changed_attributes只是一个包含了从属性名到旧的属性值的映射的Hash而已：
# Returns a hash of the attributes with unsaved changes indicating their original # values like &amp;lt;tt&amp;gt;attr =&amp;gt; original value&amp;lt;/tt&amp;gt;.</description></item><item><title>解读Rails - 处理异常</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</link><pubDate>Wed, 05 Mar 2014 13:53:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</guid><description>此文翻译自Reading Rails - Handling Exceptions，限于本人水平，翻译不当之处，敬请指教！
我们今天开始会读一些Rails的源码。我们有双重的目的，先通过学习（Rails）如何处理异常，再扩展到整个Ruby中基础知识的学习。
Rails通过让你使用rescue_from方法，让你在你的controller里边为常见的异常定义处理方法。举例来说吧，你可以在用户试图访问他们尚未付费的功能时将他们重定向到指定的付费页面。
class ApplicationController # Redirect users if they try to use disabled features. rescue_from FeatureDisabledError, InsufficientAccessError do |ex| flash[:alert] = &amp;#34;Your account does not support #{ex.feature_name}&amp;#34; redirect_to &amp;#34;/pricing&amp;#34; end #... 我们将会探索Rails是如何定义异常处理器，如何将它们与具体的异常进行匹配，以及如何使用它们去rescue失败的action。
如果需要跟着我的步骤走，请使用qwandry打开每一个相关的代码库，或者直接从github查看源码即可。
定义处理器(Handlers) ActiveSupport包含了一个用于定义异常如何被处理的模块Rescuable。第一个需要了解的方法就是rescue_from。这个方法通过方法名或者代码块为你想rescue的异常注册处理器（提示：查看代码，请在命令行中输入qw activesupport）：
def rescue_from(*klasses, &amp;amp;block) options = klasses.extract_options! unless options.has_key?(:with) if block_given? options[:with] = block else #... 首先，*klasses接收数量不定的异常类，所以你可以进行类似rescue_from(FeatureDisabledError, InsufficientAccessError)这样的调用。它们将会被存放在一个数组里。
接下来，请留意extract_options!的使用。这是一个常见的用于从一个数组生成一个options哈希表的技巧。假如klasses里边的最后一个元素是一个哈希表，那么这个元素会被弹出数组。现在Rails将会使用:with项所指定的方法，或者是使用传递给rescue_from的代码块。Rails中的这种技巧创造了一个灵活的接口。
接着继续往下看这个方法，我们看到每一个异常类都被转换成一个String对象，我们待会便会看到为什么要这么做。
def rescue_from(*klasses, &amp;amp;block) #... key = if klass.is_a?(Class) &amp;amp;&amp;amp; klass &amp;lt;= Exception klass.</description></item><item><title>解读Rails - 适配器模式</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</link><pubDate>Mon, 03 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</guid><description>本文翻译自Reading Rails - The Adapter Pattern，限于本人水平有限，翻译不当之处，敬请指教！
今天我们暂时先放下具体的代码片段，我们将要对Rails中所实现的一个比较常见的设计模式进行一番探索，这个模式就是适配器模式（Adapter Pattern）。从一定的意义上来说，这次的探索并不全面，但是我希望能够突出一些实际的例子。
为了跟随本文的步骤，请使用qwandry打开相关的代码库，或者直接在Github上查看这些代码。
适配器模式 适配器模式可以用于对不同的接口进行包装以及提供统一的接口，或者是让某一个对象看起来像是另一个类型的对象。在静态类型的编程语言里，我们经常使用它去满足类型系统的特点，但是在类似Ruby这样的弱类型编程语言里，我们并不需要这么做。尽管如此，它对于我们来说还是有很多意义的。
当使用第三方类或者库的时候，我们经常从这个例子开始（start out fine）：
def find_nearest_restaurant(locator) locator.nearest(:restaurant, self.lat, self.lon) end 我们假设有一个针对locator的接口，但是如果我们想要find_nearest_restaurant能够支持另一个库呢？这个时候我们可能就会去尝试添加新的特殊的场景的处理：
def find_nearest_restaurant(locator) if locator.is_a? GeoFish locator.nearest(:restaurant, self.lat, self.lon) elsif locator.is_a? ActsAsFound locator.find_food(:lat =&amp;gt; self.lat, :lon =&amp;gt; self.lon) else raise NotImplementedError, &amp;#34;#{locator.class.name} is not supported.&amp;#34; end end 这是一个比较务实的解决方案。或许我们也不再需要考虑去支持另一个库了。也或许find_nearest_restaurant就是我们使用locator的唯一场景。
那假如你真的需要去支持一个新的locator，那又会是怎么样的呢？那就是你有三个特定的场景。再假如你需要实现find_nearest_hospital方法呢？这样你就需要在维护这三种特定的场景时去兼顾两个不同的地方。当你觉得这种解决方案不再可行的时候，你就需要考虑适配器模式了。
在这个例子中，我们可以为GeoFish以及ActsAsFound编写适配器，这样的话，在我们的其他代码中，我们就不需要了解我们当前正在使用的是哪个库了：
def find_nearest_hospital(locator) locator.find :type =&amp;gt; :hospital, :lat =&amp;gt; self.lat, :lon =&amp;gt; self.lon end locator = GeoFishAdapter.new(geo_fish_locator) find_nearest_hospital(locator) 特意假设的例子就到此为止，接下来让我们看看真实的代码。
MultiJSON ActiveSupport在做JSON格式的解码时，用到的是MultiJSON，这是一个针对JSON库的适配器。每一个库都能够解析JSON，但是做法却不尽相同。让我们分别看看针对oj和yajl的适配器。 (提示: 可在命令行中输入qw multi_json查看源码。)</description></item><item><title>解读Rails(系列翻译)</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-xi-lie-fan-yi/</link><pubDate>Sun, 02 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-xi-lie-fan-yi/</guid><description>解读Rails系列文章原文来自Reading Rails，我将尽我所能完成此系列所有文章的翻译。以下部分为原文系列对应翻译：
在我们的工作中，我们的大部分时间都是在使用各种各样的工具，但是你知不知道它们是如何工作的呢？
在这个系列里，我们通过阅读Ruby on Rails的源码去探索其内部的工作机制。我们将不仅仅只是学到与Rails有关的知识，我们也将见识到Ruby里边一些有趣的功能，以及一些有用的新技巧。
解读Rails - 适配器模式 解读Rails - 错误和验证器 解读Rails - 验证机制是如何配置的 解读Rails - Concern 解读Rails - 更多的Migrations 解读Rails - Migrations 解读Rails - 属性方法(Attribute Methods) 解读Rails - 跟踪model中属性（值）的变更 解读Rails - 处理异常</description></item></channel></rss>