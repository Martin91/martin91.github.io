<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>字典 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%AD%97%E5%85%B8/</link><description>Recent content in 字典 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 19 Feb 2022 15:38:20 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%AD%97%E5%85%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>当反射 map[string]interface{} 遇上 MapIndex 方法，返回值的 Kind 不是具体类型？</title><link>https://blog.hackerpie.com/posts/reflect/why-reflect-map-index-function-returns-interface/</link><pubDate>Sat, 19 Feb 2022 15:38:20 +0800</pubDate><guid>https://blog.hackerpie.com/posts/reflect/why-reflect-map-index-function-returns-interface/</guid><description>&lt;h2 id="什么是反射">什么是反射？&lt;/h2>
&lt;p>反射是一种在运行时用于探测甚至修改内存数据以及程序行为的机制，在 go 语言中通过 &lt;code>reflect&lt;/code> 包实现。直白来说，利用反射，我们可以实现包括但不限于的以下这些场景：&lt;/p>
&lt;ul>
&lt;li>数据的反序列化，比如 json、yaml 等格式数据从纯文本到内存数据结构的反序列化过程&lt;/li>
&lt;li>动态修改内存中的数据，比如创建新的字典数据、修改结构体的字段的值等&lt;/li>
&lt;li>动态调用对象的某个方法或者包里的某个函数等&lt;/li>
&lt;li>检查数据的类型以及对象的方法列表等&lt;/li>
&lt;/ul>
&lt;h2 id="所以这次想说什么问题呢">所以，这次想说什么问题呢？&lt;/h2>
&lt;p>今天想分享的，是我前几天在一个使用 golang 反射功能对 map[string]interface{} 类型的数据做处理的过程中，遇到的一个反直觉的问题。下面是相关代码片断示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>myData := &lt;span style="font-weight:bold">map&lt;/span>[&lt;span style="">string&lt;/span>]&lt;span style="font-weight:bold">interface&lt;/span>{}{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>json.Unmarshal(&lt;span style="font-style:italic">&amp;#34;{\&amp;#34;name\&amp;#34;: \&amp;#34;martin\&amp;#34;, \&amp;#34;score\&amp;#34;: 99}&amp;#34;&lt;/span>, &amp;amp;myData)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HandleData(myData) &lt;span style="font-style:italic">// 进行数据的处理过程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> HandleData(data &lt;span style="font-weight:bold">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value := reflect.ValueOf(data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">// ... 其他代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyValue := value.MapIndex(reflect.ValueOf(&lt;span style="font-style:italic">&amp;#34;name&amp;#34;&lt;/span>)) &lt;span style="font-style:italic">// 从数据中取对应键 name 的值，应该为 &amp;#34;martin&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">&lt;/span> &lt;span style="font-weight:bold">switch&lt;/span> keyValue.Kind() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">case&lt;/span> reflect.String:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doSth()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">// ... 其他 case，但是都没有包含 reflect.Interface 的匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">// ... 其他后续代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在编写上面的代码的过程中，我期待程序会进入 &lt;code>case reflect.String:&lt;/code> 的逻辑分支进行处理，但是事实上，并没有。在网上搜索了一番之后，StackOverflow 上的这个&lt;a href="https://stackoverflow.com/questions/14142667/reflect-value-mapindex-returns-a-value-different-from-reflect-valueof">问答&lt;/a>给出了可以奏效的方法：&lt;/p></description></item></channel></rss>