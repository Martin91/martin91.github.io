<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>翻译 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E7%BF%BB%E8%AF%91/</link><description>Recent content in 翻译 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Mon, 28 Jul 2014 21:32:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Spree 2.3.0已经发布</title><link>https://blog.hackerpie.com/posts/archive/spree-2-dot-3-0yi-jing-fa-bu/</link><pubDate>Mon, 28 Jul 2014 21:32:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/spree-2-dot-3-0yi-jing-fa-bu/</guid><description>&lt;p>**声明：**原文来自Spree官方博客&lt;a href="http://spreecommerce.com/blog/spree-2-3-released">Spree 2.3.0 Released&lt;/a>，原文发布日期是2014-06-30，本文仅作翻译。&lt;/p>
&lt;p>&lt;strong>简要介绍：&lt;/strong>&lt;a href="http://spreecommerce.com/">Spree&lt;/a>是一个基于&lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a>开发的开源在线商城框架，提供了从商品展示购买、下单支付到库存管理以及订单管理等一系列基本功能，并且支持通过第三方扩展的形式定制或者扩展框架的功能，最新版本的Spree已经支持最新的Rails版本。&lt;/p>
&lt;p>Spree 2.3的最新更改已经加入对Rails 4.1的支持，提供了更好的配置项的存储，更好的针对多店铺的支持，以及更好的游客追踪。Spree 2.3的发布，有赖于总的97位贡献者以及他们总的700多个的commit记录。现在，我们非常兴奋地宣布：Spree 2.3发布了！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="rails-41-的支持">Rails 4.1 的支持&lt;/h3>
&lt;p>现在，Rails 4.1已经得到了Spree 2.3的支持。如果你希望基于Rails 4.1进行开发，那么Spree 2.3就是特为你准备的发布版。&lt;/p>
&lt;h3 id="基于序列化记录的配置项">基于序列化记录的配置项&lt;/h3>
&lt;p>现在，所有的配置项存储在一个记录上，而不是存储在&lt;code>spree_preferences&lt;/code>表中。这意味着，为了获取一个配置项，比如价格的计算器配置，就会触发一个数据库查询，所查询的那一行记录有一个包含了所有配置信息的命名为&lt;code>preferences&lt;/code>的列。&lt;/p>
&lt;p>而在此之前，对于每一个配置记录本身，可能都会有一个单独的数据库调用，而在查询到所请求的配置项之后，还是有可能会有任意数目的数据库调用产生。而现在，我们总的只需要调用一次，这意味着程序本身将会有一些速度上的提升。&lt;/p>
&lt;h3 id="更好的多店铺支持">更好的多店铺支持&lt;/h3>
&lt;p>我们已经添加了一个名为&lt;code>Spree::Store&lt;/code>的model，用于支持基本的多店铺/多域名的站点。其在&lt;code>spree-multi-domain&lt;/code>这个扩展的基础上提供了针对多店铺/多域名的基本框架。一些原有的配置项被转移到了这个model上，以此实现根据具体的店铺提供不同配置值：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Spree::Config[:site_name]&lt;/code> 迁移到了 &lt;code>name&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:site_url]&lt;/code> 迁移到了 &lt;code>url&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_meta_description]&lt;/code> 迁移到了 &lt;code>meta_description&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_meta_keywords]&lt;/code> 迁移到了 &lt;code>meta_keywords&lt;/code>&lt;/li>
&lt;li>&lt;code>Spree::Config[:default_seo_title]&lt;/code> 迁移到了 &lt;code>seo_title&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个数据库迁移文件将会负责把这些原有的配置项转移到一个新的默认的store实例上。&lt;/p>
&lt;p>一个新的名为&lt;code>ControllerHelpers::Store&lt;/code>的Concern提供了一个&lt;code>current_store&lt;/code>helper，可以在请求的域名的基础上，通过它获取当前店铺。&lt;/p>
&lt;h3 id="更好的游客追踪">更好的游客追踪&lt;/h3>
&lt;p>现在，我们用了一个签名的cookie在浏览器中存储游客的唯一的token。通过它允许关闭了浏览器的顾客可以在再次访问时继续完成他们的购物流程。更重要的是，这也帮助作为商店主人的你方便地识别游客的订单。由于我们在访客来访时都会设置&lt;code>cookies.signed[:guest_token]&lt;/code>，所以除了订单，或许你可以把cookie用于其他用途。&lt;/p>
&lt;p>举个实际例子，如果游客需要收藏一个商品，你可以创建一个用于记录收藏记录的model，然后把&lt;code>cookies.signed[:guest_token]&lt;/code>赋值给这个model中的&lt;code>token&lt;/code>字段。这将有助于你分析当前用户在此之前的订单以及收藏记录，这对于商品推荐将是非常有用的。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>你可以从&lt;a href="https://github.com/spree/spree/releases/tag/v2.3.0">Github&lt;/a>上浏览更详细的变更列表。&lt;/p></description></item><item><title>属性方法</title><link>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</link><pubDate>Wed, 12 Mar 2014 20:58:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_attribute_methods/">Reading Rails - Attribute Methods&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>在我们&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">上一篇的探讨&lt;/a>中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似&lt;code>attribute_method_suffix&lt;/code>这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似&lt;code>name&lt;/code>这样的模型属性以及对应生成的类似&lt;code>name_changed?&lt;/code>这样的方法的。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="声明declarations">声明（Declarations）&lt;/h3>
&lt;p>属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，&lt;code>attribute_method_suffix&lt;/code>后缀式方法是一个为每个属性都定义了一个helper方法的方法。在&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">之前的讨论&lt;/a>中，ActiveModel使用这种方式为您的每一个属性都定义了一个&lt;code>_changed?&lt;/code>方法(&lt;strong>提示&lt;/strong>： 命令行中键入&lt;code>qw activemodel&lt;/code>查看代码)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">Dirty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">include&lt;/span> ActiveModel::AttributeMethods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_method_suffix &lt;span style="font-style:italic">&amp;#39;_changed?&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_change&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_will_change!&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_was&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们打开ActiveModel库中的&lt;code>attribute_methods.rb&lt;/code>文件，并且看一下到底发生了什么事情。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> attribute_method_suffix(*suffixes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.attribute_method_matchers += suffixes.map! &lt;span style="font-weight:bold">do&lt;/span> |suffix|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AttributeMethodMatcher.new &lt;span style="font-style:italic">suffix&lt;/span>: suffix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当你调用&lt;code>attribute_method_suffix&lt;/code>方法的时候，每一个后缀都通过&lt;code>map!&lt;/code>方法转换为一个&lt;code>AttributeMethodMatcher&lt;/code>对象。这些对象会被存储在&lt;code>attribute_method_matchers&lt;/code>中。如果你重新看一下这个module的顶部，你会发现&lt;code>attribute_method_matchers&lt;/code>是在每一个包含此module的类中使用&lt;code>class_attribute&lt;/code>定义的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">AttributeMethods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:attribute_aliases&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:attribute_method_matchers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">instance_writer&lt;/span>: &lt;span style="">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>class_attribute&lt;/code>方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Employee&lt;/span> &amp;lt; Person
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Person.database = Sql.new(&lt;span style="font-style:italic">:host&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#39;localhost&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Employee.database &lt;span style="font-style:italic">#=&amp;gt; &amp;lt;Sql:host=&amp;#39;localhost&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ruby中并没有&lt;code>class_attribute&lt;/code>的内置实现，它是在ActiveSupport(&lt;strong>提示&lt;/strong>:命令行中键入&lt;code>qw activesupport&lt;/code>查看代码)中定义的方法。如果你对此比较好奇，可以简单看下&lt;code>attribute.rb&lt;/code>&lt;/p></description></item><item><title>跟踪model中属性（值）的变更</title><link>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</link><pubDate>Fri, 07 Mar 2014 13:02:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_change_tracking/">Reading Rails - Change Tracking&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>我们今天来看看Rails是如何追踪model里边属性的变更的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>person = Person.find(8)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name = &lt;span style="font-style:italic">&amp;#34;Mortimer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name_changed? &lt;span style="font-style:italic">#=&amp;gt; true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name_was &lt;span style="font-style:italic">#=&amp;gt; &amp;#34;Horton&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.changes &lt;span style="font-style:italic">#=&amp;gt; {&amp;#34;name&amp;#34;=&amp;gt;[&amp;#34;Horton&amp;#34;,&amp;#34;Mortimer&amp;#34;]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.save!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.changes &lt;span style="font-style:italic">#=&amp;gt; {}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>name_changed?&lt;/code>方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="activemodel">ActiveModel&lt;/h3>
&lt;p>当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（&lt;strong>提示&lt;/strong>： 命令行中键入&lt;code>qw activemodel&lt;/code>查看代码）定义了没有与数据库捆绑的逻辑。我们将从&lt;code>dirty.rb&lt;/code>文件开始。在这个模块最开始的地方，代码调用了&lt;code>attribute_method_suffix&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">Dirty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">include&lt;/span> ActiveModel::AttributeMethods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_method_suffix &lt;span style="font-style:italic">&amp;#39;_changed?&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_change&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_will_change!&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_was&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>attribute_method_suffix&lt;/code>定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似&lt;code>_changed?&lt;/code>后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到&lt;code>def attribute_changed?&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> attribute_changed?(&lt;span style="">attr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> changed_attributes.include?(&lt;span style="">attr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似&lt;code>name_changed?&lt;/code>的方法时，Rails将会把&lt;code>&amp;quot;name&amp;quot;&lt;/code>作为参数&lt;code>attr&lt;/code>传给上述方法。往回看一点点，你会发现&lt;code>changed_attributes&lt;/code>只是一个包含了从属性名到旧的属性值的映射的&lt;code>Hash&lt;/code>而已：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># Returns a hash of the attributes with unsaved changes indicating their original&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># values like &amp;lt;tt&amp;gt;attr =&amp;gt; original value&amp;lt;/tt&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.name # =&amp;gt; &amp;#34;bob&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.name = &amp;#39;robert&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.changed_attributes # =&amp;gt; {&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;bob&amp;#34;}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> changed_attributes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @changed_attributes ||= {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Ruby中，如果你之前都没有见过&lt;code>||=&lt;/code>操作，那么你可能需要了解这其实是一个用于初始化变量值的技巧。当它第一次被访问的时候，变量的值是&lt;code>nil&lt;/code>，所以它返回了一个空的&lt;code>Hash&lt;/code>并且用其初始化&lt;code>@changed_attributes&lt;/code>。当它再一次被访问的时候，&lt;code>@changed_attributes&lt;/code>已经被赋值过了。那么现在我们可以回答我们的第一个问题了，&lt;code>name_changed?&lt;/code>方法被转发到&lt;code>attribute_changed?&lt;/code>方法，而后者会在&lt;code>changed_attributes&lt;/code>中查找特定的值。&lt;/p></description></item><item><title>解读Rails - 处理异常</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</link><pubDate>Wed, 05 Mar 2014 13:53:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_handling_exceptions/">Reading Rails - Handling Exceptions&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>我们今天开始会读一些Rails的源码。我们有双重的目的，先通过学习（Rails）如何处理异常，再扩展到整个Ruby中基础知识的学习。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Rails通过让你使用&lt;code>rescue_from&lt;/code>方法，让你在你的&lt;code>controller&lt;/code>里边为常见的异常定义处理方法。举例来说吧，你可以在用户试图访问他们尚未付费的功能时将他们重定向到指定的付费页面。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">ApplicationController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic"># Redirect users if they try to use disabled features.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rescue_from FeatureDisabledError, InsufficientAccessError &lt;span style="font-weight:bold">do&lt;/span> |ex|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flash[&lt;span style="font-style:italic">:alert&lt;/span>] = &lt;span style="font-style:italic">&amp;#34;Your account does not support &lt;/span>&lt;span style="font-weight:bold;font-style:italic">#{&lt;/span>ex.feature_name&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redirect_to &lt;span style="font-style:italic">&amp;#34;/pricing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将会探索Rails是如何定义异常处理器，如何将它们与具体的异常进行匹配，以及如何使用它们去rescue失败的action。&lt;/p>
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="定义处理器handlers">定义处理器(Handlers)&lt;/h3>
&lt;p>ActiveSupport包含了一个用于定义异常如何被处理的模块&lt;code>Rescuable&lt;/code>。第一个需要了解的方法就是&lt;code>rescue_from&lt;/code>。这个方法通过方法名或者代码块为你想rescue的异常注册处理器（&lt;strong>提示&lt;/strong>：查看代码，请在命令行中输入&lt;code>qw activesupport&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> rescue_from(*klasses, &amp;amp;block)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options = klasses.extract_options!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">unless&lt;/span> options.has_key?(&lt;span style="font-style:italic">:with&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> block_given?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options[&lt;span style="font-style:italic">:with&lt;/span>] = block
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，&lt;code>*klasses&lt;/code>接收数量不定的异常类，所以你可以进行类似&lt;code>rescue_from(FeatureDisabledError, InsufficientAccessError)&lt;/code>这样的调用。它们将会被存放在一个数组里。&lt;/p>
&lt;p>接下来，请留意&lt;code>extract_options!&lt;/code>的使用。这是一个常见的用于从一个数组生成一个options哈希表的技巧。假如klasses里边的最后一个元素是一个哈希表，那么这个元素会被弹出数组。现在Rails将会使用&lt;code>:with&lt;/code>项所指定的方法，或者是使用传递给rescue_from的代码块。Rails中的这种技巧创造了一个灵活的接口。&lt;/p>
&lt;p>接着继续往下看这个方法，我们看到每一个异常类都被转换成一个String对象，我们待会便会看到为什么要这么做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> rescue_from(*klasses, &amp;amp;block)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key = &lt;span style="font-weight:bold">if&lt;/span> klass.is_a?(Class) &amp;amp;&amp;amp; klass &amp;lt;= Exception
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> klass.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">elsif&lt;/span> klass.is_a?(String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> klass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里你应该注意的是，Rails是如何判定&lt;code>klass&lt;/code>是不是继承自&lt;code>Exception&lt;/code>的。通常情况下，你可能会通过使用&lt;code>obj.is_a?(Exception)&lt;/code>来判断一个对象是不是某一个具体类型的实例，即使如此，&lt;code>klass&lt;/code>并不是&lt;code>Exception&lt;/code>，而只是&lt;code>Class&lt;/code>。那么我们又怎么找出它使哪一类呢？Ruby在&lt;code>Module&lt;/code>上定义了类似&lt;code>&amp;lt;=&lt;/code>这样的&lt;a href="http://ruby-doc.org/core-1.9.3/Module.html#method-i-3C">用于比较的操作符&lt;/a>。当操作符左边的对象是操作符右边对象的子类的时候，它会返回true。举个例子，&lt;code>ActiveRecord::RecordNotFound &amp;lt; Exception&lt;/code>返回true，而&lt;code>ActiveRecord::RecordNotFound &amp;gt; Exception&lt;/code>返回false。&lt;/p></description></item><item><title>解读Rails - 适配器模式</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</link><pubDate>Mon, 03 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</guid><description>&lt;p>本文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_the_adapter_pattern/?utm_source=rubyweekly&amp;amp;utm_medium=email">Reading Rails - The Adapter Pattern&lt;/a>，限于本人水平有限，翻译不当之处，敬请指教！&lt;/p>
&lt;p>今天我们暂时先放下具体的代码片段，我们将要对Rails中所实现的一个比较常见的设计模式进行一番探索，这个模式就是&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式（Adapter Pattern）&lt;/a>。从一定的意义上来说，这次的探索并不全面，但是我希望能够突出一些实际的例子。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>为了跟随本文的步骤，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开相关的代码库，或者直接在&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">Github&lt;/a>上查看这些代码。&lt;/p>
&lt;h3 id="适配器模式">适配器模式&lt;/h3>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式&lt;/a>可以用于对不同的接口进行包装以及提供统一的接口，或者是让某一个对象看起来像是另一个类型的对象。在静态类型的编程语言里，我们经常使用它去满足类型系统的特点，但是在类似Ruby这样的弱类型编程语言里，我们并不需要这么做。尽管如此，它对于我们来说还是有很多意义的。&lt;/p>
&lt;p>当使用第三方类或者库的时候，我们经常从这个例子开始（start out fine）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们假设有一个针对&lt;code>locator&lt;/code>的接口，但是如果我们想要&lt;code>find_nearest_restaurant&lt;/code>能够支持另一个库呢？这个时候我们可能就会去尝试添加新的特殊的场景的处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> locator.is_a? GeoFish
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">elsif&lt;/span> locator.is_a? ActsAsFound
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find_food(&lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat, &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">raise&lt;/span> NotImplementedError, &lt;span style="font-style:italic">&amp;#34;&lt;/span>&lt;span style="font-weight:bold;font-style:italic">#{&lt;/span>locator.class.name&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic"> is not supported.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个比较务实的解决方案。或许我们也不再需要考虑去支持另一个库了。也或许&lt;code>find_nearest_restaurant&lt;/code>就是我们使用&lt;code>locator&lt;/code>的唯一场景。&lt;/p>
&lt;p>那假如你真的需要去支持一个新的&lt;code>locator&lt;/code>，那又会是怎么样的呢？那就是你有三个特定的场景。再假如你需要实现&lt;code>find_nearest_hospital&lt;/code>方法呢？这样你就需要在维护这三种特定的场景时去兼顾两个不同的地方。当你觉得这种解决方案不再可行的时候，你就需要考虑适配器模式了。&lt;/p>
&lt;p>在这个例子中，我们可以为&lt;code>GeoFish&lt;/code>以及&lt;code>ActsAsFound&lt;/code>编写适配器，这样的话，在我们的其他代码中，我们就不需要了解我们当前正在使用的是哪个库了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find &lt;span style="font-style:italic">:type&lt;/span> =&amp;gt; &lt;span style="font-style:italic">:hospital&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>locator = GeoFishAdapter.new(geo_fish_locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>特意假设的例子就到此为止，接下来让我们看看真实的代码。&lt;/p></description></item><item><title>解读Rails(系列翻译)</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-xi-lie-fan-yi/</link><pubDate>Sun, 02 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-xi-lie-fan-yi/</guid><description>&lt;p>解读Rails系列文章原文来自&lt;a href="http://monkeyandcrow.com/series/reading_rails/">Reading Rails&lt;/a>，我将尽我所能完成此系列所有文章的翻译。以下部分为原文系列对应翻译：&lt;/p>
&lt;p>在我们的工作中，我们的大部分时间都是在使用各种各样的工具，但是你知不知道它们是如何工作的呢？&lt;/p>
&lt;p>在这个系列里，我们通过阅读&lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a>的源码去探索其内部的工作机制。我们将不仅仅只是学到与Rails有关的知识，我们也将见识到Ruby里边一些有趣的功能，以及一些有用的新技巧。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.hackerpie.com/blog/articles/2014/03/03/jie-du-rails-gua-pei-qi-mo-shi/">解读Rails - 适配器模式&lt;/a>&lt;/li>
&lt;li>&lt;a href="">解读Rails - 错误和验证器&lt;/a>&lt;/li>
&lt;li>&lt;a href="">解读Rails - 验证机制是如何配置的&lt;/a>&lt;/li>
&lt;li>&lt;a href="">解读Rails - Concern&lt;/a>&lt;/li>
&lt;li>&lt;a href="">解读Rails - 更多的Migrations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.hackerpie.com/blog/articles/2017/10/14/jie-du-rails-migrations/">解读Rails - Migrations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.hackerpie.com/blog/articles/2014/03/12/shu-xing-fang-fa/">解读Rails - 属性方法(Attribute Methods)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.hackerpie.com/blog/articles/2014/03/07/zhui-zong-bian-geng/">解读Rails - 跟踪model中属性（值）的变更&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.hackerpie.com/blog/articles/2014/03/05/jie-du-rails-chu-li-yi-chang/">解读Rails - 处理异常&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>