<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sidekiq on Hackerpie</title><link>https://blog.hackerpie.com/tags/sidekiq/</link><description>Recent content in Sidekiq on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 20 Nov 2016 10:08:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/sidekiq/index.xml" rel="self" type="application/rss+xml"/><item><title>Sidekiq 信号处理源码分析</title><link>https://blog.hackerpie.com/posts/archive/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi/</link><pubDate>Sun, 20 Nov 2016 10:08:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi/</guid><description>&lt;h3 id="引言">引言&lt;/h3>
&lt;p>在之前的文章&lt;a href="https://blog.hackerpie.com/blog/articles/2016/10/29/sidekiqren-wu-diao-du-liu-cheng-fen-xi/">《Sidekiq任务调度流程分析》&lt;/a>中，我们一起仔细分析了 Sidekiq 是如何基于多线程完成队列任务处理以及调度的。我们在之前的分析里，看到了不管是 &lt;code>Sidekiq::Scheduled::Poller&lt;/code> 还是 &lt;code>Sidekiq::Processor&lt;/code> 的核心代码里，都会有一个由 &lt;code>@done&lt;/code> 实例变量控制的循环体：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @thread ||= safe_thread(&lt;span style="font-style:italic">&amp;#34;scheduler&amp;#34;&lt;/span>) &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initial_wait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">while&lt;/span> !@done &lt;span style="font-style:italic"># 这是 poller 的循环控制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enqueue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sidekiq.logger.info(&lt;span style="font-style:italic">&amp;#34;Scheduler exiting...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">while&lt;/span> !@done &lt;span style="font-style:italic"># 这是我们常说的 worker 循环控制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process_one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_stopped(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">rescue&lt;/span> Sidekiq::Shutdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_stopped(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">rescue&lt;/span> Exception =&amp;gt; ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_died(self, ex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，这些 &lt;code>@done&lt;/code> 实例变量决定了 &lt;code>poller&lt;/code> 线程跟 &lt;code>worker&lt;/code> 线程是否循环执行？一旦 &lt;code>@done&lt;/code> 被改为 &lt;code>true&lt;/code>，那循环体就不再执行，线程自然也就是退出了。于是，单从这些代码，我们可以断定， Sidekiq 就是通过设置 &lt;code>@done&lt;/code> 的值来通知一个线程安全退出（graceful exit）的。我们也知道，生产环境中，我们是通过发送信号的方式来告诉 sidekiq 退出或者进入静默(quiet)状态的，那么，这里的 &lt;code>@done&lt;/code> 是怎么跟信号处理联系起来的呢？这些就是今天这篇文章的重点了！&lt;/p></description></item><item><title>sidekiq任务调度流程分析</title><link>https://blog.hackerpie.com/posts/archive/sidekiqren-wu-diao-du-liu-cheng-fen-xi/</link><pubDate>Sat, 29 Oct 2016 16:32:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/sidekiqren-wu-diao-du-liu-cheng-fen-xi/</guid><description>&lt;p>&lt;a href="http://sidekiq.org/">sidekiq&lt;/a>是 Ruby 中一个非常优秀而且可靠的后台任务处理软件，其依赖 Redis 实现队列任务的增加、重试以及调度等。而 sidekiq 从启动到开始不断处理任务、定时任务以及失败任务的重试，都是如何调度的呢？遇到问题的时候，又该如何调优呢？&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="注意">注意&lt;/h3>
&lt;ol>
&lt;li>今天的分析所参考的 sidekiq 的源码对应版本是 4.2.3；&lt;/li>
&lt;li>今天所讨论的内容，将主要围绕任务调度过程进行分析，无关细节将不赘述，如有需要，请自行翻阅 sidekiq 源码；&lt;/li>
&lt;li>文章内容真的很长，请做好心理准备。&lt;br>


 &lt;img src="https://ruby-china-files.b0.upaiyun.com/photo/2016/0fc8f347a4c7cba67066b2527bdb8f94.png!large" alt="">
&lt;/li>
&lt;/ol>
&lt;h3 id="你将了解到什么">你将了解到什么？&lt;/h3>
&lt;ol>
&lt;li>sidekiq 的任务调度机制：定时任务、重试任务的检查机制，队列任务的排队以及队列权重对处理优先级的影响；&lt;/li>
&lt;li>sidekiq 的中间件机制以及在此基础上实现的任务重试机制。&lt;/li>
&lt;/ol>
&lt;h2 id="先抛结论">先抛结论&lt;/h2>
&lt;h3 id="时序图">时序图&lt;/h3>
&lt;p>对于复杂的调用关系，我习惯用时序图帮助我理解其中各部分代码之间相互协作的关系（注意：为了避免太多细节造成阅读负担，我将参数传递以及返回值等冗杂过程去除了，只保留与任务调度相关的关键调用）：
![sidekiq 任务调度时序图](/images/medias/sidekiq job dispatcher.png)&lt;/p>
&lt;h3 id="人话">人话&lt;/h3>
&lt;p>Sidekiq 整个任务调度过程中依赖几个不同角色的代码共同协作，其分工如下：


 &lt;img src="https://ruby-china-files.b0.upaiyun.com/photo/2016/fe43bace416ba3bb7f7d77b397683bf4.png!large" alt="">
&lt;/p>
&lt;h2 id="源码之旅--启动">源码之旅 —— 启动&lt;/h2>
&lt;p>当我们在执行 &lt;code>sidekiq&lt;/code> 时，源码中的 &lt;code>bin/sidekiq.rb&lt;/code> 文件便是第一个开始执行的文件，让我们看看&lt;a href="https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/bin/sidekiq#L9-L12">里边的主要代码&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/bin/sidekiq#L9-L12&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cli = Sidekiq::CLI.instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cli.parse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cli.run &lt;span style="font-style:italic"># &amp;lt;===== 这边走&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>紧靠 &lt;code>begin&lt;/code> 后边的两行代码首先创建 &lt;code>Sidekiq::CLI&lt;/code> 类的一个实例，接着调用实例方法 &lt;code>#parse&lt;/code> 解析 sidekiq 的配置参数，其中包括队列的配置、worker 数量的配置等，在此不展开了。接着实例方法 &lt;code>#run&lt;/code> 将带着我们继续往下走，让我们继续看 &lt;code>lib/sidekiq/cli.rb&lt;/code> 里边的代码：&lt;/p></description></item></channel></rss>