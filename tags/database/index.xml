<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on Hackerpie</title><link>https://blog.hackerpie.com/tags/database/</link><description>Recent content in Database on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 15 Aug 2019 08:18:30 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>django 快速启动数据库客户端程序</title><link>https://blog.hackerpie.com/posts/2019/quick-launch-database-client-in-django/</link><pubDate>Thu, 15 Aug 2019 08:18:30 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/quick-launch-database-client-in-django/</guid><description>实际工作经历中，免不了有时候需要连接数据库进行问题排查分析的场景，之前一直习惯通过 mysql -uxxx -hxxxx -P1234 ... 这样的方式来启动命令行形式的 MySQL 数据库客户端程序，只是用起来比较麻烦，每次都要拷贝各个配置参数，还要记得不要在命令里显式打印密码。后来想起来在开发 Ruby on Rails 程序的时候，其提供了 rails dbconsole 的命令，可以方便直接启动对应的数据库客户端命令行程序，联想到 Django 理论上也有，所以找到了 python manage.py dbshell 这个命令，使用效果和自己手动敲 mysql 命令行是一样的，省去繁琐的参数设定步骤。
使用效果 用法 其用法可以直接查询命令行帮助文档：
# python manage.py dbshell -h Usage: manage.py dbshell [options] Runs the command-line client for specified database, or the default database if none is provided. Options: -v VERBOSITY, --verbosity=VERBOSITY Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output --settings=SETTINGS The Python path to a settings module, e.</description></item></channel></rss>