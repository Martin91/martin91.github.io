<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>贪心算法 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link><description>Recent content in 贪心算法 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 14 Jan 2023 09:13:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>贪心算法：LeetCode 409 最长回文串双 100 题解</title><link>https://blog.hackerpie.com/posts/algorithms/greedy/longest-palindrome/</link><pubDate>Sat, 14 Jan 2023 09:13:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/algorithms/greedy/longest-palindrome/</guid><description>&lt;p>这篇文章分享如何借助位的思想将 LeetCode 409——最长回文串的题解优化到双 100。&lt;/p>
&lt;h2 id="题目">题目&lt;/h2>
&lt;p>题目本身是 easy 级别的，原题目是：&lt;/p>
&lt;pre tabindex="0">&lt;code>给定一个包含大写字母和小写字母的字符串 s ，返回 通过这些字母构造成的 最长的回文串 。

在构造过程中，请注意 区分大小写 。比如 &amp;#34;Aa&amp;#34; 不能当做一个回文字符串。
&lt;/code>&lt;/pre>&lt;h2 id="思路分析">思路分析&lt;/h2>
&lt;p>基本的思路是遍历字符串中的所有字符，并且统计每个字符出现的次数，最后求和 &lt;code>length&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>如果字符出现次数为偶数，则将结果 &lt;code>length&lt;/code> 直接加 2；&lt;/li>
&lt;li>如果字符出现次数为奇数，则进一步判断：
&lt;ul>
&lt;li>如果 &lt;code>length&lt;/code> 未曾加过奇数，则将结果 &lt;code>length&lt;/code> 直接加上这个奇数；&lt;/li>
&lt;li>如果 &lt;code>length&lt;/code> 已经加过奇数，则将结果 &lt;code>length&lt;/code> 直接加上这个奇数-1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这个思路的基本原则是所有出现次数为偶数的字符可以刚好位于回文中心的两侧，而最多只能有一个长度为奇数的回文中心，超过的子串就只能舍弃掉一个字符使其变成偶数长度。&lt;/p>
&lt;h3 id="对应代码">对应代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> longestPalindrome(s &lt;span style="">string&lt;/span>) &lt;span style="">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stats := &lt;span style="font-weight:bold">map&lt;/span>[&lt;span style="">rune&lt;/span>]&lt;span style="">int&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">for&lt;/span> _, b := &lt;span style="font-weight:bold">range&lt;/span> s {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> _, found := stats[b]; !found {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stats[b] = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stats[b]++
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length := 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasOdd := &lt;span style="font-weight:bold">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">for&lt;/span> _, count := &lt;span style="font-weight:bold">range&lt;/span> stats {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> count % 2 == 0 {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length += count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> !hasOdd {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length += count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasOdd = &lt;span style="font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length += (count - 1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">return&lt;/span> length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个题解得到的结果是 100% 时间优势，39% 空间优势，空间占用看来有比较大的优化空间。&lt;/p></description></item><item><title>贪心算法：数组拆分 LeetCode 561</title><link>https://blog.hackerpie.com/posts/algorithms/greedy/split_arrays/</link><pubDate>Thu, 12 Jan 2023 10:50:28 +0800</pubDate><guid>https://blog.hackerpie.com/posts/algorithms/greedy/split_arrays/</guid><description>&lt;p>LeetCode #561 是一道贪心算法的 easy 题，记录这道题主要是想梳理一下数学证明的过程。贪心算法比较有趣的是，代码一般写起来都不复杂，但是证明本身才是个比较难的事情。比如在面试过程中，你可能意识到了一个题目需要用贪心算法，或者是你不好判断是否可以使用贪心算法，但是就是无法向面试官证明自己的分析。&lt;/p>
&lt;p>先看题目吧：&lt;/p>
&lt;pre tabindex="0">&lt;code>给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，
使得从 1 到 n 的 min(ai, bi) 总和最大。
返回该最大总和
&lt;/code>&lt;/pre>&lt;p>直觉是使用贪心算法，策略是：&lt;/p>
&lt;pre tabindex="0">&lt;code>对数组 nums 进行升序排序，依次两两分组，取各组中第一个数的和
&lt;/code>&lt;/pre>&lt;h2 id="证明过程">证明过程&lt;/h2>
&lt;p>一般而言，可以使用反证法来验证贪心策略的正确性。&lt;/p>
&lt;p>&lt;strong>假设：&lt;/strong> 有升序排序好的数组 &lt;code>a&lt;/code>，按照上面所说的策略，我们得到分组：&lt;/p>
&lt;pre tabindex="0">&lt;code>(a[0], a[1]), (a[2], a[3]), (a[i-1], a[i]), (a[i+1], a[i+2]), ..., (a[2n-2], a[2n-1])
&lt;/code>&lt;/pre>&lt;p>由于数组是升序，故有 &lt;code>a[i-1] ≤ a[i] ≤ a[i+1] ≤ a[i+2]&lt;/code>，这四个元素对应的分组中较小数求和结果为 &lt;code>a[i-1] + a[i+1]&lt;/code>&lt;/p>
&lt;p>重新排列从&lt;code>a[i-1]&lt;/code>到&lt;code>a[i+2]&lt;/code>的两个分组，共有4种可能的组合：&lt;/p>
&lt;ol>
&lt;li>&lt;code>(a[i-1], a[i+1]), (a[i], a[i+2])&lt;/code>，其对应各组较小数总和为 &lt;code>a[i-1] + a[i] ≤ a[i-1] + a[i+1]&lt;/code>；&lt;/li>
&lt;li>&lt;code>(a[i-1], a[i+2]), (a[i], a[i+1])&lt;/code>，其对应各组较小数总和为 &lt;code>a[i-1] + a[i] ≤ a[i-1] + a[i+1]&lt;/code>；&lt;/li>
&lt;li>&lt;code>(a[i], a[i+1]), (a[i-1], a[i+2])&lt;/code>，其对应各组较小数总和为 &lt;code>a[i] + a[i-1] ≤ a[i-1] + a[i+1]&lt;/code>；&lt;/li>
&lt;li>&lt;code>(a[i], a[i+2]), (a[i-1], a[i+1])&lt;/code>，其对应各组较小数总和为 &lt;code>a[i] + a[i-1] ≤ a[i-1] + a[i+1]&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>即，如果不按照升序结果进行两两分组，则各组较小数的总和小于或等于按照升序结果进行两两分组的各组较小数的总和。&lt;/p></description></item></channel></rss>