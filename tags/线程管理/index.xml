<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>线程管理 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</link><description>Recent content in 线程管理 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 20 Nov 2016 10:08:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>Sidekiq 信号处理源码分析</title><link>https://blog.hackerpie.com/posts/archive/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi/</link><pubDate>Sun, 20 Nov 2016 10:08:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/sidekiq-xin-hao-chu-li-yuan-ma-fen-xi/</guid><description>&lt;h3 id="引言">引言&lt;/h3>
&lt;p>在之前的文章&lt;a href="https://blog.hackerpie.com/blog/articles/2016/10/29/sidekiqren-wu-diao-du-liu-cheng-fen-xi/">《Sidekiq任务调度流程分析》&lt;/a>中，我们一起仔细分析了 Sidekiq 是如何基于多线程完成队列任务处理以及调度的。我们在之前的分析里，看到了不管是 &lt;code>Sidekiq::Scheduled::Poller&lt;/code> 还是 &lt;code>Sidekiq::Processor&lt;/code> 的核心代码里，都会有一个由 &lt;code>@done&lt;/code> 实例变量控制的循环体：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/scheduled.rb#L63-L73&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @thread ||= safe_thread(&lt;span style="font-style:italic">&amp;#34;scheduler&amp;#34;&lt;/span>) &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initial_wait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">while&lt;/span> !@done &lt;span style="font-style:italic"># 这是 poller 的循环控制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enqueue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wait
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sidekiq.logger.info(&lt;span style="font-style:italic">&amp;#34;Scheduler exiting...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># https://github.com/mperham/sidekiq/blob/5ebd857e3020d55f5c701037c2d7bedf9a18e897/lib/sidekiq/processor.rb#L66-L77&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">while&lt;/span> !@done &lt;span style="font-style:italic"># 这是我们常说的 worker 循环控制&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process_one
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_stopped(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">rescue&lt;/span> Sidekiq::Shutdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_stopped(self)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">rescue&lt;/span> Exception =&amp;gt; ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @mgr.processor_died(self, ex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，这些 &lt;code>@done&lt;/code> 实例变量决定了 &lt;code>poller&lt;/code> 线程跟 &lt;code>worker&lt;/code> 线程是否循环执行？一旦 &lt;code>@done&lt;/code> 被改为 &lt;code>true&lt;/code>，那循环体就不再执行，线程自然也就是退出了。于是，单从这些代码，我们可以断定， Sidekiq 就是通过设置 &lt;code>@done&lt;/code> 的值来通知一个线程安全退出（graceful exit）的。我们也知道，生产环境中，我们是通过发送信号的方式来告诉 sidekiq 退出或者进入静默(quiet)状态的，那么，这里的 &lt;code>@done&lt;/code> 是怎么跟信号处理联系起来的呢？这些就是今天这篇文章的重点了！&lt;/p></description></item></channel></rss>