<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>效率 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E6%95%88%E7%8E%87/</link><description>Recent content in 效率 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 12 Jan 2022 11:24:20 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E6%95%88%E7%8E%87/index.xml" rel="self" type="application/rss+xml"/><item><title>瞎聊：避免手握锤子看啥都是钉子</title><link>https://blog.hackerpie.com/posts/tittle-tattle/something-learned-from-techparty-blog-migration/</link><pubDate>Wed, 12 Jan 2022 11:24:20 +0800</pubDate><guid>https://blog.hackerpie.com/posts/tittle-tattle/something-learned-from-techparty-blog-migration/</guid><description>前两天在给 TechParty 设计和制作新的官网，选型了上线了作为网站设计和托管的平台。最后的一个大活就是如何将 TechParty 原来的 218 篇博客文章迁移到新的官网上，一站式管理。比较遗憾的是，上线了的博客系统并没有提供编程接口用于迁移已有博客，所以唯一的方式就是自行想办法将所有文章逐一拷贝到他们的富文本编辑器中。
TechParty 旧的博客系统是用的 Jekyll，一种主要使用 markdown 作为协作语言的静态博客站点生成工具，而上线了只支持富文本编辑器，也不支持 markdown，所以大体思路就是直接拷贝 Jekyll 生成好的 TechParty 博客的网页内容到上线了的编辑器中。但是问题是，这里面可是有 218 篇文章呢！不是一个小的工作量，所以作为程序员，第一反应就是尝试能不能将这个过程自动化？
尝试 python + selenium 第一个尝试的方案就是基于 Python + Selenium 的方式来实现整个过程的自动化。整个方案花了一下午大概4个小时的时间，包括解决 pip 依赖安装的问题、如何模拟鼠标长按选中博客文章正文的操作、如何模拟复制、如何模拟人工在上线了编辑器里点击和编辑等，最终整个方案因为无法完美模拟人工点击上线了的各个编辑框（为了进入编辑态，非编辑态时，页面上的各个控件显示为普通的文本）而失败……
人肉复制粘贴 第二天早上，痛定思痛，觉得自动化的路子虽然看起来比较聪明，但是实际上还有一些缺点或者未知问题：
可复用性低：因为这种从 Jekyll 博客到上线了博客迁移的需求显然对我自己是一次性的任务，而对于别人可能压根没有什么需求 未知的异常处理：哪怕我解决了交互模拟的问题，我还是无法预知脚本后续自动执行的过程中还会不会有其他问题需要解决，尽管脚本自动化很酷，但是干过的人都知道，它不是一劳永逸的事情，往往你还是需要人盯着，以备随时介入处理突发的情况，而且一旦修复完问题，你还需要脚本到底是从头再来，还是断点作业，问题只多不少，无穷无尽…… 在决定是否改用人工方式之前，我算了道简单的数学题：
迁移一篇文章的主要操作是：打开原文链接 -&amp;gt; 复制原文标题 -&amp;gt; 在上线了新建一篇博客 -&amp;gt; 粘贴标题 -&amp;gt; 回到原文复制原文发布时间 -&amp;gt; 粘贴到上线了的文章中 -&amp;gt; 复制原文正文 -&amp;gt; 粘贴到上线了的编辑器中 -&amp;gt; 点击上线了的“上线”按钮。如此往复就可以把所有文章都复制完。 以上一篇文章的复制操作，我大致觉得 60 秒绝对足够了，事实上对于熟练操作之后应该不需要这么长的时间 所以理论上复制所有文章需要的时间是： 218 x 60 = 13080 秒 = 218 分钟 = 3 小时 38 分钟 而更加合理一点的是按照每个文章 30 秒，那总体的时间就是减半的，也就是 1 小时 49 分钟 很有意思，当我想的是我需要完成 218 篇文章的搬迁的时候，我主观上觉得这是一个人肉操作难以短时间内完成的任务，至少可能要一整天都在干这个事情，除非用程序来自动完成。但是通过分解和评估，事实上不管是3个多小时还是2个小时，我都觉得这时间是要比写代码和调试程序的时间短的，而且结果可控的多：我很确定这是一个纯粹的时间问题，只要无脑操作，一定时间后，这个事情一定会完成，不用担心过程还有没有大的问题。</description></item><item><title>我的刻意练习——双拼输入</title><link>https://blog.hackerpie.com/posts/skills/double-input-method/</link><pubDate>Thu, 23 Dec 2021 14:38:20 +0800</pubDate><guid>https://blog.hackerpie.com/posts/skills/double-input-method/</guid><description>作为一个程序员，每天都需要和键盘打交道，自然少不了打字这个事情，以前就知道有五笔输入法，但是也听说练习起来很难，加上拼音输入法很简便，自然就使用的拼音输入法。但是久了之后，总是觉得全拼输入法太死板了，有没有不需要逐个打入每个拼音字母就可以快速打出需要的字的输入法的呢？答案是有的：双拼输入法，是的，就是我在写这篇文章时所使用的输入法。当然，我现在的打字速度就跟乌龟爬行一样慢……
什么是双拼输入法呢？ 与全拼输入法需要挨个输入拼音字母不同的是，双拼是将汉语拼音中的所有声母和韵母都映射到键盘上，所以打字的时候，我们的思维转回自然的拼音规律：声母+韵母，非常简单直观。换句话说，对于每个汉字，固定只需要 2 次敲击键盘就可以了，比起全拼自然是会更高效的，只是刚开始从全拼切换过来确实很痛苦，我自己也是在刻意练习中。比如“双拼输入法”这五个字，对应的拼音就是：
shuang pin shu ru fa 按照声母和韵母分开的话，就是：
sh uang p in sh u r u f a 以小鹤双拼来讲，对应的键盘输入顺序就是：u、l、p、b、u、u、r、u、f、a。
所以双拼输入法的原理极其简单，但是练习起来还是有一些痛苦的。
个人练习的心得体会 第一周 第一周的打字速度跟龟速一样，基本上是打每个字都得停顿一下提前想下接下来每个字的拼音以及对应的码键。这期间，我可以把我的电脑和手机的输入法都改为双拼，使用的小鹤双拼，虽然打字速度慢得叫人别扭，但是还是可以勉强忍受的。
第二周 经过第一周的刻意练习后，基本上就能记住每个双拼码的键位了，所以打字速度有一定程度的提升，这个阶段的最大问题就是经常不自觉就按照全拼的输入法来打字了，比如想要打“成”字，一打得快了，就是先打了“c”，实际上应该是“i”。又或者是“就”这个字，应该是“jq”，但是总是一顺手就打成了“ji”，哪怕现在已经是第三周了，也是如此。除了输入习惯的错误，另一个错误就是没有选对字，因为打字的时候注意力都在思考键位和纠正输入的键上，所以总是不自觉刚把拼音打完，就直接空格了，结果很可能选到的词是错误的。
第三周（此刻是2022-01-12的上午） 第三周会和第二周差不多，会稍微更注意候选词的问题，但是仍旧没有彻底改掉全拼遗留的输入习惯，容易一快了就敲错键，所以大部分时候的打字都还是需要在退格和重新输入中往复。不过好的一点是，打字速度还是有一些提升的，一些常用字可以很快甚至肌肉记忆般敲出来了，整体顺利和流畅的话，也能感受到双拼带给人的节奏感，期待未来某一天能够靠着双拼输入法一“写”千里。
感悟 刻意练习，就是决心把自己丢进不适应的状态中，并且尝试在不改变环境的前提下努力改变状态，比如我一开始就故意将自己的所有设备的输入法都改为双拼，后来跟别人聊天的时候，发现自己打字好慢，还特别多错字，特别着急，但是这个时候我也没有去临时改回全拼，而是坚持继续用双拼，慢慢就发现打字速度还是能提升，也就再也没有必要考虑改回双拼输入了。想起以前我纠正自己打字时候的指法也是一样的道理。 好看的码表图 以下图片是我从知乎讨论区（文末附了链接）看到的一个图片，我觉得比较好看，就拿来当壁纸了，以备对双拼码表不熟悉的时候可以直接回到桌面看看，但是实际上也基本没有用上，分享给有需要的同学。 学习资料 知乎：怎样记忆双拼输入法的回答</description></item></channel></rss>