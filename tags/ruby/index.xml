<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on Hackerpie</title><link>https://blog.hackerpie.com/tags/ruby/</link><description>Recent content in Ruby on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 22 Sep 2019 19:48:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>谨防猴子补丁以及Python中排查技巧</title><link>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</link><pubDate>Sun, 22 Sep 2019 19:48:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>前两天晚上线上系统突发故障，在立马打开线上错误日志之后，却只能得到一堆毫无意义的程序调用栈(traceback)的输出，于是团队成员陷入漫长而又抓瞎的问题排查过程中。问题很幸运地得到了解决，但是我一直想不明白为什么日志里打印的调用栈毫无意义，按照经验，它应该打印的是异常产生过程中的调用栈才是。在经过后续的源码分析和排查之后，我才发现其实是因为项目中一个老旧的代码使用了&lt;strong>猴子补丁&lt;/strong>导致，这也是这篇文章想要讨论的内容。&lt;/p>
&lt;h3 id="什么是猴子补丁">什么是猴子补丁&lt;/h3>
&lt;p>猴子补丁是一种用来在运行时修改（增加、变更、删除等）系统软件行为的编程方式。在动态语言里有广泛的猴子补丁应用的影子，比如 Ruby 的打开类的特性支持运行时扩展类的定义甚至替换方法的实现，Python 的方法或者函数由于可以在运行时进行替换而使得猴子补丁的应用非常方便，其他像 JavaScript 语言同样可以应用猴子补丁。&lt;/p>
&lt;h4 id="猴子补丁是把双刃剑">猴子补丁是把双刃剑&lt;/h4>
&lt;p>猴子补丁以其灵活性，可以实现补丁代码和应用代码的完全分离，同时使得应用代码在调用方式上保持调用方式始终不变。
从应用代码的角度来看，它调用的就是某个模块的原始定义的方法或者函数；而从被调用的方法或者函数的角度来看，猴子补丁的存在对它是透明的存在，以下展示一个 Python 语言的 Demo：&lt;/p>
&lt;p>我们从一个极简例子开始，向这个美好的世界问好：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如执行以上脚本，得到的结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ python demo.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个很简单，接下来假如打一个猴子补丁：我们扩充原来的 &lt;code>greet&lt;/code> 的行为，现在除了打印信息，还要打印下当前的时间：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">from&lt;/span> &lt;span style="font-weight:bold">datetime&lt;/span> &lt;span style="font-weight:bold">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>original_greet = greet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet_with_time():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_greet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(datetime.now())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet = greet_with_time &lt;span style="font-style:italic"># replace the implementation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet() &lt;span style="font-style:italic"># 这里的调用和原来没有变化&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行它，得到的结果是：&lt;/p></description></item><item><title>Mac OS 环境 Rails 6.0 下 webpack-dev-server wrong version 问题解决方案</title><link>https://blog.hackerpie.com/posts/2019/fix-webpack-dev-server-wrong-version-in-rails-6/</link><pubDate>Fri, 06 Sep 2019 15:18:30 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/fix-webpack-dev-server-wrong-version-in-rails-6/</guid><description>&lt;h3 id="错误信息">错误信息&lt;/h3>
&lt;p>昨天装上了 Ruby on Rails 6.0，满心欢喜初始化项目并且按照指引安装了 webpacker 之后，执行熟悉无比的 &lt;code>rails c&lt;/code> 命令，却给了一个报错：&lt;/p>
&lt;pre tabindex="0">&lt;code># 错误信息片段

yarn check v1.7.0
success Folder in sync.
Done in 0.15s.
yarn check v1.7.0
error &amp;#34;webpack-dev-server#yargs#cliui&amp;#34; is wrong version: expected &amp;#34;^4.0.0&amp;#34;, got &amp;#34;5.0.0&amp;#34;
error &amp;#34;webpack-dev-server#yargs#yargs-parser&amp;#34; is wrong version: expected &amp;#34;^11.1.1&amp;#34;, got &amp;#34;13.1.1&amp;#34;
error Found 2 errors.
info Visit https://yarnpkg.com/en/docs/cli/check for documentation about this command.
&lt;/code>&lt;/pre>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>目前关于 Rails 6.0 相关的资料感觉不多，所幸找到了一篇日文版的帖子，成功解决了上边的问题：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ brew upgrade yarn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ yarn upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终问题解决，又能愉快地前进了！&lt;/p>
&lt;p>**注意：**我自己已经一年多没怎么开发 Rails 项目了，全栈开发那就更久远了。Rails 6.0 改动比较大，很多新的组件我自己也还没有来得及熟悉，所以这篇文章就先不做上面解决方案的原理分析了，仅为备忘，可能会有其他人遇到一样的问题。&lt;/p></description></item><item><title>不严谨的不同语言下大 Excel 文件写入的性能比较</title><link>https://blog.hackerpie.com/posts/2019/general-excel-writor-benchmark-comparation-among-different-languages/</link><pubDate>Sat, 23 Mar 2019 21:11:06 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/general-excel-writor-benchmark-comparation-among-different-languages/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>去年因为线上系统需要导出大量数据（大概是 11 万行）到 Excel，代码是 Python 2.7 写的，除去数据库查询耗时，整个的 Excel 文件生成也还要耗费几十秒的时间，这听起来真是一个非常夸张的事情。后来为其更换了号称性能表现最好的 pyexcelerate 库，性能确实有提升，但是仍是差强人意的在小几十秒。&lt;/p>
&lt;p>昨天突发奇想，如果是换成其他语言，这个 excel 导出是否还需要这么长时间？于是经过一番试验之后，就有了今天的这篇文章。&lt;/p>
&lt;p>**特别声明：**试验只是为了感官上做个简单对比，测试结果采集数据只考虑了耗时，没有考虑资源消耗等情况，需要严谨的性能对比的读者，可以放弃阅读了。&lt;/p>
&lt;h3 id="测试内容">测试内容&lt;/h3>
&lt;p>使用不同的语言及其版本，测试各自完成包含 100,000 行 x 50 列单元格的 excel 文件的生成，对比其各自耗费时间，3次重复执行取其平均值后进行横向比较。&lt;/p>
&lt;h4 id="已经测试的语言及版本">已经测试的语言及版本&lt;/h4>
&lt;ul>
&lt;li>Ruby 2.6 + axlsx 2.0.1&lt;/li>
&lt;li>Python 2.7 + pyexcelerate 0.7.3&lt;/li>
&lt;li>Python 3.6 + pyexcelerate 0.7.3&lt;/li>
&lt;li>Go 1.10.1 + gooxml 0.8&lt;/li>
&lt;/ul>
&lt;h4 id="测试代码">测试代码&lt;/h4>
&lt;p>&lt;a href="https://github.com/Martin91/excel-writors-benchmark">https://github.com/Martin91/excel-writors-benchmark&lt;/a>&lt;/p>
&lt;h4 id="结果">结果&lt;/h4>
&lt;p>

 &lt;img src="https://blog.hackerpie.com/images/posts/benchmark-excel.png" alt="benchmark.png">
&lt;/p>
&lt;h4 id="结论">结论&lt;/h4>
&lt;p>就这个测试场景来说：&lt;/p>
&lt;ol>
&lt;li>Go 1.10.1 + gooxml 0.8 是最快的；&lt;/li>
&lt;li>同样是 pyexcelerate 0.7.3，Python 2.7 性能优于 Python 3.6;&lt;/li>
&lt;li>Ruby 2.6 + axlsx 2.0.1 表现最不给力，这里有个题外话，选择的 axlsx 本身并不是性能最好的 gem，只是流行度够高，Ruby 有一个专门针对性能优化后的 gem，但是因为知之甚少，没有采用。&lt;/li>
&lt;/ol></description></item><item><title>Ruby中Hash的7个日常使用范例</title><link>https://blog.hackerpie.com/posts/archive/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li/</link><pubDate>Tue, 25 Mar 2014 20:05:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/rubyzhong-hashde-7ge-ri-chang-shi-yong-fan-li/</guid><description>&lt;p>此文翻译自&lt;a href="http://blog.8thcolor.com/en/2014/03/7-daily-use-cases-of-ruby-hash/?utm_source=rubyweekly&amp;amp;utm_medium=email#json-to-hash">7 daily use cases of Ruby Hash&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>每一天，你都需要跟Hash相处。创建一个新的Hash或者是通过它的某一个键去检索其中的元素这样的工作，都是常见也是非常简单的。但是当你需要合并两个嵌套的Hash或者是从某一个Hash里边过滤某些键，你可能需要考虑得多一点。通过完整的&lt;a href="http://ruby-doc.org/">文档&lt;/a>，你可以找到对Hash中的每一个方法的充分解释。但是由于文档不是面向应用场景的，你可能没法很快找到你的解决方案。在下面，我分享了我日常中经常遇到的Hash中的7个常用场景，希望它们对你有用。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="1-如何将一个json转换为一个hash">1. 如何将一个JSON转换为一个Hash？&lt;/h2>
&lt;p>假设你刚刚接收到一个用JSON表示的Twitter账号的资料信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="">data&lt;/span> &lt;span style="">=&lt;/span> &lt;span style="">&amp;#39;&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="font-style:italic">&amp;#34;Aaron Patterson&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">&amp;#34;screen_name&amp;#34;&lt;/span>: &lt;span style="font-style:italic">&amp;#34;tenderlove&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">&amp;#34;location&amp;#34;&lt;/span>: &lt;span style="font-style:italic">&amp;#34;Seattle, WA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你希望能够将它转化为一个Hash,这样会更方便你进行对数据的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>require &lt;span style="font-style:italic">&amp;#39;json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>profile = JSON.parse(data)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>** 在IRB中的输出结果：**&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>=&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">&amp;#34;name&amp;#34;&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#34;Aaron Patterson&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">&amp;#34;screen_name&amp;#34;&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#34;tenderlove&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">&amp;#34;location&amp;#34;&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#34;Seattle, WA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看文档：&lt;a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-parse">JSON#parse&lt;/a>&lt;/p>
&lt;h2 id="2-如何将一个hash转换为一个json">2. 如何将一个Hash转换为一个JSON？&lt;/h2>
&lt;p>在你的web应用程序中，你需要追踪当前星期每一天新注册用户的数量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>signups_of_the_week = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">monday&lt;/span>: 2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">tuesday&lt;/span>: 3,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">wednesday&lt;/span>: 4,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">thursday&lt;/span>: 20,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">friday&lt;/span>: 5,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">saturday&lt;/span>: 2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">sunday&lt;/span>: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以通过API的方式把它们以JSON格式提供给客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>require &lt;span style="font-style:italic">&amp;#39;json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>signups_of_the_week.to_json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>** 在IRB中的输出结果：**&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>=&amp;gt; &lt;span style="font-style:italic">&amp;#34;{&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">monday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:2,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">tuesday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:3,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">wednesday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:4,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">thursday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:20,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">friday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:5,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">saturday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:2,&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">sunday&lt;/span>&lt;span style="font-weight:bold;font-style:italic">\&amp;#34;&lt;/span>&lt;span style="font-style:italic">:5}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看文档：&lt;a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-generate">JSON#generate&lt;/a>
边注：&lt;a href="http://www.ruby-doc.org/stdlib-2.1.0/libdoc/json/rdoc/JSON.html#method-i-pretty_generate">JSON#pretty_generate&lt;/a>对于更好的打印以及调试非常有用。&lt;/p></description></item><item><title>属性方法</title><link>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</link><pubDate>Wed, 12 Mar 2014 20:58:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_attribute_methods/">Reading Rails - Attribute Methods&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>在我们&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">上一篇的探讨&lt;/a>中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似&lt;code>attribute_method_suffix&lt;/code>这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似&lt;code>name&lt;/code>这样的模型属性以及对应生成的类似&lt;code>name_changed?&lt;/code>这样的方法的。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="声明declarations">声明（Declarations）&lt;/h3>
&lt;p>属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，&lt;code>attribute_method_suffix&lt;/code>后缀式方法是一个为每个属性都定义了一个helper方法的方法。在&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">之前的讨论&lt;/a>中，ActiveModel使用这种方式为您的每一个属性都定义了一个&lt;code>_changed?&lt;/code>方法(&lt;strong>提示&lt;/strong>： 命令行中键入&lt;code>qw activemodel&lt;/code>查看代码)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">Dirty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">include&lt;/span> ActiveModel::AttributeMethods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_method_suffix &lt;span style="font-style:italic">&amp;#39;_changed?&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_change&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_will_change!&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_was&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们打开ActiveModel库中的&lt;code>attribute_methods.rb&lt;/code>文件，并且看一下到底发生了什么事情。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> attribute_method_suffix(*suffixes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.attribute_method_matchers += suffixes.map! &lt;span style="font-weight:bold">do&lt;/span> |suffix|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AttributeMethodMatcher.new &lt;span style="font-style:italic">suffix&lt;/span>: suffix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当你调用&lt;code>attribute_method_suffix&lt;/code>方法的时候，每一个后缀都通过&lt;code>map!&lt;/code>方法转换为一个&lt;code>AttributeMethodMatcher&lt;/code>对象。这些对象会被存储在&lt;code>attribute_method_matchers&lt;/code>中。如果你重新看一下这个module的顶部，你会发现&lt;code>attribute_method_matchers&lt;/code>是在每一个包含此module的类中使用&lt;code>class_attribute&lt;/code>定义的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">AttributeMethods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:attribute_aliases&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:attribute_method_matchers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">instance_writer&lt;/span>: &lt;span style="">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>class_attribute&lt;/code>方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Employee&lt;/span> &amp;lt; Person
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Person.database = Sql.new(&lt;span style="font-style:italic">:host&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#39;localhost&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Employee.database &lt;span style="font-style:italic">#=&amp;gt; &amp;lt;Sql:host=&amp;#39;localhost&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ruby中并没有&lt;code>class_attribute&lt;/code>的内置实现，它是在ActiveSupport(&lt;strong>提示&lt;/strong>:命令行中键入&lt;code>qw activesupport&lt;/code>查看代码)中定义的方法。如果你对此比较好奇，可以简单看下&lt;code>attribute.rb&lt;/code>&lt;/p></description></item><item><title>跟踪model中属性（值）的变更</title><link>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</link><pubDate>Fri, 07 Mar 2014 13:02:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/zhui-zong-bian-geng/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_change_tracking/">Reading Rails - Change Tracking&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>我们今天来看看Rails是如何追踪model里边属性的变更的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>person = Person.find(8)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name = &lt;span style="font-style:italic">&amp;#34;Mortimer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name_changed? &lt;span style="font-style:italic">#=&amp;gt; true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.name_was &lt;span style="font-style:italic">#=&amp;gt; &amp;#34;Horton&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.changes &lt;span style="font-style:italic">#=&amp;gt; {&amp;#34;name&amp;#34;=&amp;gt;[&amp;#34;Horton&amp;#34;,&amp;#34;Mortimer&amp;#34;]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.save!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person.changes &lt;span style="font-style:italic">#=&amp;gt; {}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>name_changed?&lt;/code>方法是从哪来的呢？变更又是如何被创建的？让我们顺着这个场景，看看这一切背后的秘密。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="activemodel">ActiveModel&lt;/h3>
&lt;p>当你想探寻ActiveRecord里边的功能时，你应该首先了解ActiveModel。ActiveModel（&lt;strong>提示&lt;/strong>： 命令行中键入&lt;code>qw activemodel&lt;/code>查看代码）定义了没有与数据库捆绑的逻辑。我们将从&lt;code>dirty.rb&lt;/code>文件开始。在这个模块最开始的地方，代码调用了&lt;code>attribute_method_suffix&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">Dirty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">include&lt;/span> ActiveModel::AttributeMethods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_method_suffix &lt;span style="font-style:italic">&amp;#39;_changed?&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_change&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_will_change!&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_was&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>attribute_method_suffix&lt;/code>定义了定制的属性读写器。这主要用来告诉Rails将一些带有类似&lt;code>_changed?&lt;/code>后缀的调用分发到特定的处理器方法上。为了看看它们是如何实现的，请向下滚动代码，并且找到&lt;code>def attribute_changed?&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> attribute_changed?(&lt;span style="">attr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> changed_attributes.include?(&lt;span style="">attr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将会在另外的一篇文章中再着重介绍如何连接这些方法的细节，当你调用一个类似&lt;code>name_changed?&lt;/code>的方法时，Rails将会把&lt;code>&amp;quot;name&amp;quot;&lt;/code>作为参数&lt;code>attr&lt;/code>传给上述方法。往回看一点点，你会发现&lt;code>changed_attributes&lt;/code>只是一个包含了从属性名到旧的属性值的映射的&lt;code>Hash&lt;/code>而已：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># Returns a hash of the attributes with unsaved changes indicating their original&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># values like &amp;lt;tt&amp;gt;attr =&amp;gt; original value&amp;lt;/tt&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.name # =&amp;gt; &amp;#34;bob&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.name = &amp;#39;robert&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># person.changed_attributes # =&amp;gt; {&amp;#34;name&amp;#34; =&amp;gt; &amp;#34;bob&amp;#34;}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> changed_attributes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @changed_attributes ||= {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Ruby中，如果你之前都没有见过&lt;code>||=&lt;/code>操作，那么你可能需要了解这其实是一个用于初始化变量值的技巧。当它第一次被访问的时候，变量的值是&lt;code>nil&lt;/code>，所以它返回了一个空的&lt;code>Hash&lt;/code>并且用其初始化&lt;code>@changed_attributes&lt;/code>。当它再一次被访问的时候，&lt;code>@changed_attributes&lt;/code>已经被赋值过了。那么现在我们可以回答我们的第一个问题了，&lt;code>name_changed?&lt;/code>方法被转发到&lt;code>attribute_changed?&lt;/code>方法，而后者会在&lt;code>changed_attributes&lt;/code>中查找特定的值。&lt;/p></description></item><item><title>解读Rails - 处理异常</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</link><pubDate>Wed, 05 Mar 2014 13:53:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-chu-li-yi-chang/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_handling_exceptions/">Reading Rails - Handling Exceptions&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>我们今天开始会读一些Rails的源码。我们有双重的目的，先通过学习（Rails）如何处理异常，再扩展到整个Ruby中基础知识的学习。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Rails通过让你使用&lt;code>rescue_from&lt;/code>方法，让你在你的&lt;code>controller&lt;/code>里边为常见的异常定义处理方法。举例来说吧，你可以在用户试图访问他们尚未付费的功能时将他们重定向到指定的付费页面。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">ApplicationController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic"># Redirect users if they try to use disabled features.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rescue_from FeatureDisabledError, InsufficientAccessError &lt;span style="font-weight:bold">do&lt;/span> |ex|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flash[&lt;span style="font-style:italic">:alert&lt;/span>] = &lt;span style="font-style:italic">&amp;#34;Your account does not support &lt;/span>&lt;span style="font-weight:bold;font-style:italic">#{&lt;/span>ex.feature_name&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redirect_to &lt;span style="font-style:italic">&amp;#34;/pricing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将会探索Rails是如何定义异常处理器，如何将它们与具体的异常进行匹配，以及如何使用它们去rescue失败的action。&lt;/p>
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="定义处理器handlers">定义处理器(Handlers)&lt;/h3>
&lt;p>ActiveSupport包含了一个用于定义异常如何被处理的模块&lt;code>Rescuable&lt;/code>。第一个需要了解的方法就是&lt;code>rescue_from&lt;/code>。这个方法通过方法名或者代码块为你想rescue的异常注册处理器（&lt;strong>提示&lt;/strong>：查看代码，请在命令行中输入&lt;code>qw activesupport&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> rescue_from(*klasses, &amp;amp;block)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options = klasses.extract_options!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">unless&lt;/span> options.has_key?(&lt;span style="font-style:italic">:with&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> block_given?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options[&lt;span style="font-style:italic">:with&lt;/span>] = block
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先，&lt;code>*klasses&lt;/code>接收数量不定的异常类，所以你可以进行类似&lt;code>rescue_from(FeatureDisabledError, InsufficientAccessError)&lt;/code>这样的调用。它们将会被存放在一个数组里。&lt;/p>
&lt;p>接下来，请留意&lt;code>extract_options!&lt;/code>的使用。这是一个常见的用于从一个数组生成一个options哈希表的技巧。假如klasses里边的最后一个元素是一个哈希表，那么这个元素会被弹出数组。现在Rails将会使用&lt;code>:with&lt;/code>项所指定的方法，或者是使用传递给rescue_from的代码块。Rails中的这种技巧创造了一个灵活的接口。&lt;/p>
&lt;p>接着继续往下看这个方法，我们看到每一个异常类都被转换成一个String对象，我们待会便会看到为什么要这么做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> rescue_from(*klasses, &amp;amp;block)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key = &lt;span style="font-weight:bold">if&lt;/span> klass.is_a?(Class) &amp;amp;&amp;amp; klass &amp;lt;= Exception
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> klass.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">elsif&lt;/span> klass.is_a?(String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> klass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里你应该注意的是，Rails是如何判定&lt;code>klass&lt;/code>是不是继承自&lt;code>Exception&lt;/code>的。通常情况下，你可能会通过使用&lt;code>obj.is_a?(Exception)&lt;/code>来判断一个对象是不是某一个具体类型的实例，即使如此，&lt;code>klass&lt;/code>并不是&lt;code>Exception&lt;/code>，而只是&lt;code>Class&lt;/code>。那么我们又怎么找出它使哪一类呢？Ruby在&lt;code>Module&lt;/code>上定义了类似&lt;code>&amp;lt;=&lt;/code>这样的&lt;a href="http://ruby-doc.org/core-1.9.3/Module.html#method-i-3C">用于比较的操作符&lt;/a>。当操作符左边的对象是操作符右边对象的子类的时候，它会返回true。举个例子，&lt;code>ActiveRecord::RecordNotFound &amp;lt; Exception&lt;/code>返回true，而&lt;code>ActiveRecord::RecordNotFound &amp;gt; Exception&lt;/code>返回false。&lt;/p></description></item><item><title>解读Rails - 适配器模式</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</link><pubDate>Mon, 03 Mar 2014 13:40:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-gua-pei-qi-mo-shi/</guid><description>&lt;p>本文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_the_adapter_pattern/?utm_source=rubyweekly&amp;amp;utm_medium=email">Reading Rails - The Adapter Pattern&lt;/a>，限于本人水平有限，翻译不当之处，敬请指教！&lt;/p>
&lt;p>今天我们暂时先放下具体的代码片段，我们将要对Rails中所实现的一个比较常见的设计模式进行一番探索，这个模式就是&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式（Adapter Pattern）&lt;/a>。从一定的意义上来说，这次的探索并不全面，但是我希望能够突出一些实际的例子。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>为了跟随本文的步骤，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开相关的代码库，或者直接在&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">Github&lt;/a>上查看这些代码。&lt;/p>
&lt;h3 id="适配器模式">适配器模式&lt;/h3>
&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern">适配器模式&lt;/a>可以用于对不同的接口进行包装以及提供统一的接口，或者是让某一个对象看起来像是另一个类型的对象。在静态类型的编程语言里，我们经常使用它去满足类型系统的特点，但是在类似Ruby这样的弱类型编程语言里，我们并不需要这么做。尽管如此，它对于我们来说还是有很多意义的。&lt;/p>
&lt;p>当使用第三方类或者库的时候，我们经常从这个例子开始（start out fine）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们假设有一个针对&lt;code>locator&lt;/code>的接口，但是如果我们想要&lt;code>find_nearest_restaurant&lt;/code>能够支持另一个库呢？这个时候我们可能就会去尝试添加新的特殊的场景的处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_restaurant(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">if&lt;/span> locator.is_a? GeoFish
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.nearest(&lt;span style="font-style:italic">:restaurant&lt;/span>, self.lat, self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">elsif&lt;/span> locator.is_a? ActsAsFound
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find_food(&lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat, &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">raise&lt;/span> NotImplementedError, &lt;span style="font-style:italic">&amp;#34;&lt;/span>&lt;span style="font-weight:bold;font-style:italic">#{&lt;/span>locator.class.name&lt;span style="font-weight:bold;font-style:italic">}&lt;/span>&lt;span style="font-style:italic"> is not supported.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是一个比较务实的解决方案。或许我们也不再需要考虑去支持另一个库了。也或许&lt;code>find_nearest_restaurant&lt;/code>就是我们使用&lt;code>locator&lt;/code>的唯一场景。&lt;/p>
&lt;p>那假如你真的需要去支持一个新的&lt;code>locator&lt;/code>，那又会是怎么样的呢？那就是你有三个特定的场景。再假如你需要实现&lt;code>find_nearest_hospital&lt;/code>方法呢？这样你就需要在维护这三种特定的场景时去兼顾两个不同的地方。当你觉得这种解决方案不再可行的时候，你就需要考虑适配器模式了。&lt;/p>
&lt;p>在这个例子中，我们可以为&lt;code>GeoFish&lt;/code>以及&lt;code>ActsAsFound&lt;/code>编写适配器，这样的话，在我们的其他代码中，我们就不需要了解我们当前正在使用的是哪个库了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locator.find &lt;span style="font-style:italic">:type&lt;/span> =&amp;gt; &lt;span style="font-style:italic">:hospital&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lat&lt;/span> =&amp;gt; self.lat,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:lon&lt;/span> =&amp;gt; self.lon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>locator = GeoFishAdapter.new(geo_fish_locator)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find_nearest_hospital(locator)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>特意假设的例子就到此为止，接下来让我们看看真实的代码。&lt;/p></description></item><item><title>export/import datas to/from a csv file</title><link>https://blog.hackerpie.com/posts/archive/export-slash-import-to-slash-from-a-csv-file/</link><pubDate>Thu, 25 Jul 2013 22:19:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/export-slash-import-to-slash-from-a-csv-file/</guid><description>&lt;p>今天需要给客户的网站做支持产品数据导出并且更新的功能，所以就涉及到了数据的导入导出了。在经过一番对比之下，果断使用&lt;code>csv&lt;/code>格式文件作为数据导入导出的载体。&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h4 id="导出csv文件">导出csv文件&lt;/h4>
&lt;p>与csv文件主要相关的类是&lt;code>CSV&lt;/code>,此类在ruby的标准库中被定义，所以只要在代码开头引入相关文件即可:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>require &lt;span style="font-style:italic">&amp;#39;csv&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着需要创建csv文件，并在其中写入数据:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>CSV.open &lt;span style="font-style:italic">&amp;#34;path/to/csv/file&amp;#34;&lt;/span>, &lt;span style="font-style:italic">&amp;#34;wb&amp;#34;&lt;/span>, &lt;span style="font-style:italic">:col_sep&lt;/span> =&amp;gt; &lt;span style="font-style:italic">&amp;#39;|&amp;#39;&lt;/span> &lt;span style="font-weight:bold">do&lt;/span> |csv|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	csv &amp;lt;&amp;lt; [&lt;span style="font-style:italic">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="font-style:italic">&amp;#34;row&amp;#34;&lt;/span>, &lt;span style="font-style:italic">&amp;#34;of&amp;#34;&lt;/span>, &lt;span style="font-style:italic">&amp;#34;contents&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>** 这里有几个细节值得一提：**&lt;!-- raw HTML omitted -->&lt;/p>
&lt;ol>
&lt;li>&lt;code>open&lt;/code>方法是用于对CSV文件进行写操作的主要接口,对CSV文件进行写操作都应该使用此方法;&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;code>&amp;lt;&amp;lt;&lt;/code> 操作符支持将&lt;strong>字符串数组&lt;/strong>写入到csv文件,一个数组为一行，数组中的一个字符串为一个单元(field);&lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;code>open&lt;/code>方法的第三个参数是一个哈希，用于为打开的文件指定初始化赋值，具体可用的option以及其值可参考&lt;code>new&lt;/code>方法的说明:http://www.ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html#method-c-new &lt;!-- raw HTML omitted -->&lt;/li>
&lt;li>&lt;code>:col_sep&lt;/code>用于指定文件中每一行中的每个单元之间的分隔符，当通过字符串数组想文件中添加新行的时候，CSV将会在数组元素也就是每一行的单元之间插入指定的分隔符，分隔符需要尽量避开已经在待导出数据中存在的字符，以免后续导入的时候发生歧义。&lt;/li>
&lt;/ol>
&lt;h4 id="导入csv文件">导入csv文件&lt;/h4>
&lt;p>导入csv除了需要用到相关的类&lt;code>CSV&lt;/code>，还可能用到的类是&lt;code>CSV::Row&lt;/code>，前者提供打开文件以及将文件按行分隔的方法&lt;code>foreach&lt;/code>，foreach将分隔后的行逐行分配到CSV::Row的实例中，通过调用CSV::Row的实例方法&lt;code>field&lt;/code>可对每个单元进行读取。&lt;!-- raw HTML omitted -->
假设我有这样一个csv文件：&lt;/p>
&lt;pre tabindex="0">&lt;code>id | value
1234 		| 		hello
2345 		| 		world
&lt;/code>&lt;/pre>&lt;p>则相关的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>CSV.foreach(&lt;span style="font-style:italic">&amp;#39;path/to/file&amp;#39;&lt;/span>), &lt;span style="font-style:italic">:col_sep&lt;/span> =&amp;gt; &lt;span style="font-style:italic">&amp;#39;|&amp;#39;&lt;/span>, &lt;span style="font-style:italic">:headers&lt;/span> =&amp;gt; &lt;span style="font-style:italic">:first_row&lt;/span> &lt;span style="font-weight:bold">do&lt;/span> |row|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-style:italic"># use datas of each row&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	id 		= row.field &lt;span style="font-style:italic">&amp;#39;id&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	value = row.field &lt;span style="font-style:italic">&amp;#39;value&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>** 同样这里也有几个细节需要注意:**&lt;!-- raw HTML omitted -->&lt;/p></description></item></channel></rss>