<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tips on Hackerpie</title><link>https://blog.hackerpie.com/tags/tips/</link><description>Recent content in Tips on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Fri, 21 Mar 2014 01:18:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>注意Rake Task中invoke方法跟execute方法的不同</title><link>https://blog.hackerpie.com/posts/archive/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong/</link><pubDate>Fri, 21 Mar 2014 01:18:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/zhu-yi-rake-taskzhong-invokegen-executefang-fa-de-bu-tong/</guid><description>平时如果跟Rake Task有过接触的同学都会知道，当我们需要在一个Task里边调用另一个Task的时候，我们可以使用Rake::Task['task_name'].invoke的方式。但是在今天的实践中，才知道Rake::Task#invoke在默认情况下在整个运行过程中将只会被调用一次而已。话不多说，动手演示：
准备一个say hello的task，代码：
# lib/tasks/demo.rake namespace :demo do desc &amp;#34;Print &amp;#39;Hello&amp;#39; string&amp;#34; task :say_hello do puts &amp;#34;Hello, World!&amp;#34; end end 接下来在命令行中执行rake task:
$ rake demo:say_hello =&amp;gt; Hello, World! 假设我们一个循环，需要调用上边的task共5次，那么我们可能会这么写：
namespace :demo do # .... desc &amp;#34;Print &amp;#39;Hello, World!&amp;#39; five times&amp;#34; task :say_five_hello do 5.times do Rake::Task[&amp;#39;demo:say_hello&amp;#39;].invoke end end end Ok, 让我们尝试着运行这个say_five_hello的task，是不是真的会打印5次&amp;rsquo;Hello, World!&amp;lsquo;呢?
$ rake demo:say_five_hello =&amp;gt; Hello, World! 结果就是，&amp;lsquo;Hello, World!&amp;lsquo;只打印了一次，也就是说，我们的Rake::Task['demo:say_hello']只被运行了一次。
经过搜索，从StackOverflow找到了这个问题的相关描述，详见：How do I execute Rake tasks with arguments multiple times?</description></item><item><title>Split logs automatically every day</title><link>https://blog.hackerpie.com/posts/archive/split-logs-automatically-every-day/</link><pubDate>Sat, 07 Sep 2013 01:11:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/split-logs-automatically-every-day/</guid><description>Related resource(s):
&amp;ldquo;linuxcommand: logrotate&amp;rdquo;:http://linuxcommand.org/man_pages/logrotate8.html logrotate is designed to ease administration of systems that generate large numbers of log files. Normally, logrotate is run as a daily cron job.
Some important knowledges:
Any number of config files may be given. Later config files may override the options given in earlier files, so the order in which the logrotate config files are listed in is important. Normally, a single config file which includes any other config files which are needed should be used.</description></item><item><title>Write css codes distinct from different pages</title><link>https://blog.hackerpie.com/posts/archive/write-css-codes-distinct-from-different-pages/</link><pubDate>Thu, 29 Aug 2013 15:32:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/write-css-codes-distinct-from-different-pages/</guid><description>In rails, there is normally a view corresponding to an action. So if you want to do some special styles based on different pages, you can render controller name and action name in your layout file like this:
&amp;lt;body class=&amp;#34;#{controller_name} #{action_name}&amp;#34;&amp;gt; &amp;lt;!-- Render something --&amp;gt; &amp;lt;/body&amp;gt; Let&amp;rsquo;s assumpt that your current page controller is ProductsController, and your action is index, then you can write your style codes like:
.products.index { /* some styles */ }</description></item><item><title>Delete multiple git remote branches by prefixing all refs with a colon</title><link>https://blog.hackerpie.com/posts/archive/delete-multiple-git-remote-branches-by-prefixing-all-refs-with-a-colon/</link><pubDate>Sun, 21 Jul 2013 15:46:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/delete-multiple-git-remote-branches-by-prefixing-all-refs-with-a-colon/</guid><description>This article shows how to delete multiple remote branches in Git.
git push origin :branch-1 :branch-2 [:other-branches] Remember the colon :</description></item></channel></rss>