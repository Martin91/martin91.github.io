<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Hackerpie</title><link>https://blog.hackerpie.com/tags/python/</link><description>Recent content in Python on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 22 Sep 2019 19:48:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>谨防猴子补丁以及Python中排查技巧</title><link>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</link><pubDate>Sun, 22 Sep 2019 19:48:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/pay-attention-to-monkey-patch/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>前两天晚上线上系统突发故障，在立马打开线上错误日志之后，却只能得到一堆毫无意义的程序调用栈(traceback)的输出，于是团队成员陷入漫长而又抓瞎的问题排查过程中。问题很幸运地得到了解决，但是我一直想不明白为什么日志里打印的调用栈毫无意义，按照经验，它应该打印的是异常产生过程中的调用栈才是。在经过后续的源码分析和排查之后，我才发现其实是因为项目中一个老旧的代码使用了&lt;strong>猴子补丁&lt;/strong>导致，这也是这篇文章想要讨论的内容。&lt;/p>
&lt;h3 id="什么是猴子补丁">什么是猴子补丁&lt;/h3>
&lt;p>猴子补丁是一种用来在运行时修改（增加、变更、删除等）系统软件行为的编程方式。在动态语言里有广泛的猴子补丁应用的影子，比如 Ruby 的打开类的特性支持运行时扩展类的定义甚至替换方法的实现，Python 的方法或者函数由于可以在运行时进行替换而使得猴子补丁的应用非常方便，其他像 JavaScript 语言同样可以应用猴子补丁。&lt;/p>
&lt;h4 id="猴子补丁是把双刃剑">猴子补丁是把双刃剑&lt;/h4>
&lt;p>猴子补丁以其灵活性，可以实现补丁代码和应用代码的完全分离，同时使得应用代码在调用方式上保持调用方式始终不变。
从应用代码的角度来看，它调用的就是某个模块的原始定义的方法或者函数；而从被调用的方法或者函数的角度来看，猴子补丁的存在对它是透明的存在，以下展示一个 Python 语言的 Demo：&lt;/p>
&lt;p>我们从一个极简例子开始，向这个美好的世界问好：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假如执行以上脚本，得到的结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ python demo.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个很简单，接下来假如打一个猴子补丁：我们扩充原来的 &lt;code>greet&lt;/code> 的行为，现在除了打印信息，还要打印下当前的时间：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">from&lt;/span> &lt;span style="font-weight:bold">datetime&lt;/span> &lt;span style="font-weight:bold">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="font-style:italic">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>original_greet = greet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> greet_with_time():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_greet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(datetime.now())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet = greet_with_time &lt;span style="font-style:italic"># replace the implementation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-style:italic"># monkey patch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> __name__ == &lt;span style="font-style:italic">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> greet() &lt;span style="font-style:italic"># 这里的调用和原来没有变化&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行它，得到的结果是：&lt;/p></description></item><item><title>pymysql 开启调试模式</title><link>https://blog.hackerpie.com/posts/2019/enable-debug-mode-of-pymysql/</link><pubDate>Sun, 18 Aug 2019 18:32:01 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/enable-debug-mode-of-pymysql/</guid><description>&lt;p>今天在排查线上一个奇怪的数据库连接问题，所以打开了 pymysql 的源码在阅读，发现 pymysql 在其 &lt;code>connections&lt;/code> 模块里内置了一个 &lt;code>DEBUG&lt;/code> 变量用于控制是否开启调试模式，是的话，会将当前连接的操作以及报文内容都打印到控制台。&lt;/p>
&lt;h4 id="使用方法">使用方法&lt;/h4>
&lt;p>在你的服务器初始化代码里，加上对 &lt;code>DEBUG&lt;/code> 的设置，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">import&lt;/span> &lt;span style="font-weight:bold">pymysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pymysql.install_as_MySQLdb()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pymysql.connections.DEBUG = &lt;span style="font-weight:bold">True&lt;/span> &lt;span style="font-style:italic"># 这是我新加的一行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启服务器后，访问相关接口，会看到标准输出里有类似下面的一些输出：&lt;/p>
&lt;p>

 &lt;img src="https://blog.hackerpie.com/images/pymysql-debug.png" alt="clipboard.png">
&lt;/p></description></item><item><title>django 快速启动数据库客户端程序</title><link>https://blog.hackerpie.com/posts/2019/quick-launch-database-client-in-django/</link><pubDate>Thu, 15 Aug 2019 08:18:30 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/quick-launch-database-client-in-django/</guid><description>&lt;p>实际工作经历中，免不了有时候需要连接数据库进行问题排查分析的场景，之前一直习惯通过 &lt;code>mysql -uxxx -hxxxx -P1234 ...&lt;/code> 这样的方式来启动命令行形式的 MySQL 数据库客户端程序，只是用起来比较麻烦，每次都要拷贝各个配置参数，还要记得不要在命令里显式打印密码。后来想起来在开发 Ruby on Rails 程序的时候，其提供了 &lt;code>rails dbconsole&lt;/code> 的命令，可以方便直接启动对应的数据库客户端命令行程序，联想到 Django 理论上也有，所以找到了 &lt;code>python manage.py dbshell&lt;/code> 这个命令，使用效果和自己手动敲 mysql 命令行是一样的，省去繁琐的参数设定步骤。&lt;/p>
&lt;h4 id="使用效果">使用效果&lt;/h4>
&lt;p>

 &lt;img src="https://blog.hackerpie.com/images/dbshell.png" alt="clipboard.png">
&lt;/p>
&lt;h4 id="用法">用法&lt;/h4>
&lt;p>其用法可以直接查询命令行帮助文档：&lt;/p>
&lt;pre tabindex="0">&lt;code># python manage.py dbshell -h
Usage: manage.py dbshell [options]

Runs the command-line client for specified database, or the default database if none is provided.

Options:
 -v VERBOSITY, --verbosity=VERBOSITY
 Verbosity level; 0=minimal output, 1=normal output,
 2=verbose output, 3=very verbose output
 --settings=SETTINGS The Python path to a settings module, e.g.
 &amp;#34;myproject.settings.main&amp;#34;. If this isn&amp;#39;t provided, the
 DJANGO_SETTINGS_MODULE environment variable will be
 used.
 --pythonpath=PYTHONPATH
 A directory to add to the Python path, e.g.
 &amp;#34;/home/djangoprojects/myproject&amp;#34;.
 --traceback Raise on exception
 --database=DATABASE Nominates a database onto which to open a shell.
 Defaults to the &amp;#34;default&amp;#34; database.
 --version show program&amp;#39;s version number and exit
 -h, --help show this help message and exit
&lt;/code>&lt;/pre></description></item><item><title>不严谨的不同语言下大 Excel 文件写入的性能比较</title><link>https://blog.hackerpie.com/posts/2019/general-excel-writor-benchmark-comparation-among-different-languages/</link><pubDate>Sat, 23 Mar 2019 21:11:06 +0800</pubDate><guid>https://blog.hackerpie.com/posts/2019/general-excel-writor-benchmark-comparation-among-different-languages/</guid><description>&lt;h3 id="背景">背景&lt;/h3>
&lt;p>去年因为线上系统需要导出大量数据（大概是 11 万行）到 Excel，代码是 Python 2.7 写的，除去数据库查询耗时，整个的 Excel 文件生成也还要耗费几十秒的时间，这听起来真是一个非常夸张的事情。后来为其更换了号称性能表现最好的 pyexcelerate 库，性能确实有提升，但是仍是差强人意的在小几十秒。&lt;/p>
&lt;p>昨天突发奇想，如果是换成其他语言，这个 excel 导出是否还需要这么长时间？于是经过一番试验之后，就有了今天的这篇文章。&lt;/p>
&lt;p>**特别声明：**试验只是为了感官上做个简单对比，测试结果采集数据只考虑了耗时，没有考虑资源消耗等情况，需要严谨的性能对比的读者，可以放弃阅读了。&lt;/p>
&lt;h3 id="测试内容">测试内容&lt;/h3>
&lt;p>使用不同的语言及其版本，测试各自完成包含 100,000 行 x 50 列单元格的 excel 文件的生成，对比其各自耗费时间，3次重复执行取其平均值后进行横向比较。&lt;/p>
&lt;h4 id="已经测试的语言及版本">已经测试的语言及版本&lt;/h4>
&lt;ul>
&lt;li>Ruby 2.6 + axlsx 2.0.1&lt;/li>
&lt;li>Python 2.7 + pyexcelerate 0.7.3&lt;/li>
&lt;li>Python 3.6 + pyexcelerate 0.7.3&lt;/li>
&lt;li>Go 1.10.1 + gooxml 0.8&lt;/li>
&lt;/ul>
&lt;h4 id="测试代码">测试代码&lt;/h4>
&lt;p>&lt;a href="https://github.com/Martin91/excel-writors-benchmark">https://github.com/Martin91/excel-writors-benchmark&lt;/a>&lt;/p>
&lt;h4 id="结果">结果&lt;/h4>
&lt;p>

 &lt;img src="https://blog.hackerpie.com/images/posts/benchmark-excel.png" alt="benchmark.png">
&lt;/p>
&lt;h4 id="结论">结论&lt;/h4>
&lt;p>就这个测试场景来说：&lt;/p>
&lt;ol>
&lt;li>Go 1.10.1 + gooxml 0.8 是最快的；&lt;/li>
&lt;li>同样是 pyexcelerate 0.7.3，Python 2.7 性能优于 Python 3.6;&lt;/li>
&lt;li>Ruby 2.6 + axlsx 2.0.1 表现最不给力，这里有个题外话，选择的 axlsx 本身并不是性能最好的 gem，只是流行度够高，Ruby 有一个专门针对性能优化后的 gem，但是因为知之甚少，没有采用。&lt;/li>
&lt;/ol></description></item></channel></rss>