<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><description>Recent content in 数据结构 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 05 Dec 2021 20:56:28 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>后缀表达式之逆波兰表示法</title><link>https://blog.hackerpie.com/posts/algorithms/queue-and-stack/reverse-polish-representation/</link><pubDate>Sun, 05 Dec 2021 20:56:28 +0800</pubDate><guid>https://blog.hackerpie.com/posts/algorithms/queue-and-stack/reverse-polish-representation/</guid><description>&lt;h2 id="从中缀表达式说起">从中缀表达式说起&lt;/h2>
&lt;p>对于人类来说，中缀表达式是最直观自然的，比如“3+5x4”或者“(3+5)x4”，一般来说，对于中缀表达式，在程序中会用一个抽象语法树来表示表达式和求值，比如：&lt;/p>
&lt;pre tabindex="0">&lt;code> 3+5x4

 +
 / \
 / \
 3 x
 / \
 / \
 5 4
--------------------------------
 (3+5)x4

 x
 / \
 / \
 + 4
 / \
 / \
 3 5
&lt;/code>&lt;/pre>&lt;p>后续表达式求值使用二叉树的中序遍历便可。&lt;/p>
&lt;p>但是这种表达式对于计算机来说，会有2个可以考虑提升的问题：&lt;/p>
&lt;ul>
&lt;li>对于计算机不够直观，需要在树的结构上进行遍历和求值；&lt;/li>
&lt;li>额外的括号来用于明确运算优先级。&lt;/li>
&lt;/ul>
&lt;h2 id="后缀表达式">后缀表达式&lt;/h2>
&lt;p>后缀表达式，也叫&lt;a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95">逆波兰表达式&lt;/a>，前述的表达式对应的后缀表达式为：&lt;/p>
&lt;ul>
&lt;li>&lt;code>3+5x4&lt;/code>：&lt;code>3 5 4 x +&lt;/code>&lt;/li>
&lt;li>&lt;code>(3+5)x4&lt;/code>：&lt;code>3 5 + 4 x&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>可以看出后缀表达式的特点：&lt;/p>
&lt;ul>
&lt;li>操作符在操作数的末尾，比如 &lt;code>5 x 4&lt;/code> 表示为 &lt;code>5 4 x&lt;/code>；&lt;/li>
&lt;li>无需括号表达优先级&lt;/li>
&lt;/ul>
&lt;p>从计算机的角度，后缀表达式还有以下特点：&lt;/p>
&lt;ul>
&lt;li>由于没有括号，可以节省内存&lt;/li>
&lt;li>可以基于栈结构实现后缀表达式的求值&lt;/li>
&lt;li>&lt;strong>如果对抽象语法树进行末序遍历，刚好可以得到逆波兰表达式，这点比较有意思&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="将中缀表达式转为后缀表达式">将中缀表达式转为后缀表达式&lt;/h3>
&lt;p>为了将中缀表达式转为后缀表达式，一般需要用到的是&lt;a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95">调度场算法&lt;/a>，算法中需要用到一个输出队列和一个操作符栈，完整的算法细节比较多，这里简化为简单的四则运算（支持括号）来描述精简版算法，如果需要支持完整的运算符或者函数等，需要自行学习完整的调度场算法。&lt;/p>
&lt;p>以下用伪代码描述（&lt;strong>注意：&lt;/strong> 算法中的“单词符号”一词参考编译原理中的“token”一词，意思是一样的，我为了伪代码不会中英混杂，才写了中文名字，不一定精确）：&lt;/p>
&lt;pre tabindex="0">&lt;code>声明 Q：输出队列
声明 S：操作符栈

遍历中缀表达式中的每一个单词符号 x：
 如果 x 是一个操作数，直接将 x 追加到输出队列 Q 末尾，否则往下检查；
 如果 x 是一个左括号“(”，将 x 压入操作符栈 S 栈顶，否则往下检查；
 如果 x 是一个操作符：
 如果操作符栈 S 栈顶为一个优先级大于等于 x 的操作符，则将 S 栈顶的运算符弹出并且追加到输出队列 Q 末尾，最后将 x 压入栈顶；
 如果操作符栈 S 栈顶为一个优先级小于 x 的操作符，或者不为操作符（在这个简化算法里，只有可能是左括号），则直接将 x 压入栈顶即可。
 如果 x 是一个右括号“)”，则将操作符栈 S 栈顶到往下第一个左括号“(”之间的元素依次弹出并且追加到输出队列末尾，将“(”出栈丢弃，x 也不用入栈。注意：如果栈到底后仍没有找到左括号，则说明表达式不合法，左右括号不匹配。
最后将栈 S 中的元素全部依次弹出并且入队列 Q。
&lt;/code>&lt;/pre>&lt;h4 id="实例演示">实例演示&lt;/h4>
&lt;p>用一个稍微复杂的四则运算表达式来举例：&lt;code>(12+5)x(8-1)-6x6&lt;/code>。&lt;/p></description></item><item><title>数据结构：单调栈</title><link>https://blog.hackerpie.com/posts/algorithms/monotonous-stacks/monotonous-stacks/</link><pubDate>Wed, 04 Aug 2021 23:13:28 +0800</pubDate><guid>https://blog.hackerpie.com/posts/algorithms/monotonous-stacks/monotonous-stacks/</guid><description>&lt;h1 id="什么是单调栈">什么是单调栈&lt;/h1>
&lt;p>单调栈是指从栈顶到栈底，栈内元素的值符合单调性的一种特殊数据结构。从栈顶到栈底，元素的值单调递减，称为单调递减栈；反之，称为单调递增栈。&lt;/p>
&lt;pre tabindex="0">&lt;code> \ 9 / \ 1 /
 | 7 | | 3 |
 | 5 | | 5 |
 | 3 | | 7 |
 | 2 | | 9 |
 ------- -------
单调递减栈 单调递增栈
&lt;/code>&lt;/pre>&lt;h1 id="单调栈的维护">单调栈的维护&lt;/h1>
&lt;p>为了维持栈的单调性，在往栈内插入元素时，需要比较循环比较栈顶元素与待插入元素的值的大小，以单调递增栈举例，需要始终确保栈顶元素的值大于等于待插入元素的值方可插入，否则需要先弹出栈顶元素之后，重复“检查-弹出”的流程，直到栈为空，或者栈顶元素的值大于等于待插入元素的值。&lt;/p>
&lt;p>假设需要插入的元素按照序列 &lt;code>5, 2, 3, 7, 1&lt;/code> 从左到右遍历，且需要维护单调递增栈，则插入过程为：&lt;/p>
&lt;pre tabindex="0">&lt;code> \ / \ / \ / \ / \ /
 | | | 2 | | 3 | | | | 1 |
 | 5 | | 5 | | 5 | | 7 | | 7 |
 ------- ------- ------- ------- -------
 (1) (2) (3) (4) (5)
&lt;/code>&lt;/pre>&lt;p>(1) 待插入 5，栈为空，直接插入 5；&lt;br>
(2) 待插入 2，栈顶元素为 5，大于待插入元素 2，2 可以直接插入；&lt;br>
(3) 待插入 3，栈顶元素为 2，不满足大于等于 3 的要求，所以弹出栈顶元素 2；此时新的栈顶元素为 5，大于 3，3 直接入栈；&lt;br>
(4) 待插入 7，栈顶元素为 3，不满足大于等于 7 的要求，所以弹出栈顶元素 3；此时新的栈顶元素为 5，仍然小于 7，于是也弹出栈顶元素 5；最后栈为空，直接插入 7；&lt;br>
(5) 待插入 1，栈顶元素为 7，大于待插入元素 1，1 可以直接入栈。&lt;/p></description></item><item><title>算法题解：二叉树寻路</title><link>https://blog.hackerpie.com/posts/algorithms/binary-tree/binary-tree-routine/</link><pubDate>Sat, 31 Jul 2021 18:20:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/algorithms/binary-tree/binary-tree-routine/</guid><description>&lt;p>本题来自 Leetcode 的 &lt;a href="https://leetcode-cn.com/problems/path-in-zigzag-labelled-binary-tree/">1104 题&lt;/a>，是一道很有趣的考察二叉树数据结构的题，同时由于二叉树父子节点之间的特殊关系，同时还可以运用到位运算来巧妙解题。&lt;/p>
&lt;p>先贴一下题目：&lt;/p>
&lt;blockquote>
&lt;p>在一棵无限的二叉树上，每个节点都有两个子节点，树中的节点 逐行 依次按 “之” 字形进行标记。&lt;br>
如下图所示，在奇数行（即，第一行、第三行、第五行……）中，按从左到右的顺序进行标记；&lt;br>
而偶数行（即，第二行、第四行、第六行……）中，按从右到左的顺序进行标记。


 &lt;img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/tree.png" alt="">

给你树上某一个节点的标号 label，请你返回从根节点到该标号为 label 节点的路径，该路径是由途经的节点标号所组成的。&lt;/p>
&lt;/blockquote>
&lt;p>示例 1：&lt;/p>
&lt;pre tabindex="0">&lt;code>输入：label = 14
输出：[1,3,4,14]
&lt;/code>&lt;/pre>&lt;p>示例 2：&lt;/p>
&lt;pre tabindex="0">&lt;code>输入：label = 26
输出：[1,2,6,10,26]
&lt;/code>&lt;/pre>&lt;h3 id="算法题解思路1运用二叉树的节点的数值特性推导出公式求解">算法题解思路1：运用二叉树的节点的数值特性推导出公式求解&lt;/h3>
&lt;p>观察这个“之”字形二叉树，我们可以得出几个特点：&lt;/p>
&lt;ol>
&lt;li>假如所有节点都是按照从左到右依次递增，按照二叉树的特性，我们可以归纳总结出：
&lt;pre tabindex="0">&lt;code>记 vi = 某个节点的数值
v(左子节点) = 2 x vi
v(右子节点) = 2 x vi + 1

相反：
v(父节点) = vi / 2
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>对于每层(第一层为根节点)的第一个和最后一个节点，会有：
&lt;pre tabindex="0">&lt;code>v（第一个节点）= 2^(n-1) // 2 的 n-1 次方，n为当前层数
v（最后一个节点）= 2^n - 1 // 2 的 n 次方减 1，n为当前层数
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>对于任意一个数值，可以求出其所在的层数为：
&lt;pre tabindex="0">&lt;code>level = log2(N) + 1
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>从根节点开始，所有奇数层的节点是从左到右依次递增的；而所有偶数层的节点是从右到左依次递增的；&lt;/li>
&lt;li>对于某一层的所有节点来说，它们都是一个等差数列，所以数列对称位置上的两个节点数值之和总是相等，即第一个节点和最后一个节点的值之和一定等于第二个节点和倒数第二个节点的值之和。结合第 2 点，这个和始终为 2^(n-1) + 2^n - 1。&lt;/li>
&lt;/ol>
&lt;p>结合以上5点性质，我们写出求任意一个节点的伪代码为：&lt;/p></description></item></channel></rss>