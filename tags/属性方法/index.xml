<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>属性方法 on Hackerpie</title><link>https://blog.hackerpie.com/tags/%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95/</link><description>Recent content in 属性方法 on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 12 Mar 2014 20:58:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/tags/%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>属性方法</title><link>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</link><pubDate>Wed, 12 Mar 2014 20:58:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/shu-xing-fang-fa/</guid><description>&lt;p>此文翻译自&lt;a href="http://monkeyandcrow.com/blog/reading_rails_attribute_methods/">Reading Rails - Attribute Methods&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>在我们&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">上一篇的探讨&lt;/a>中，我们已经看到了Rails在跟踪属性变更中使用到的属性方法（attribute methods）。有三种类型的属性方法：前缀式（prefix）、后缀式（suffix）以及固定词缀式（ affix）。为了表述简洁，我们将只关注类似&lt;code>attribute_method_suffix&lt;/code>这样的后缀式属性方法，并且特别关注它是如何帮助我们实现类似&lt;code>name&lt;/code>这样的模型属性以及对应生成的类似&lt;code>name_changed?&lt;/code>这样的方法的。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果需要跟着我的步骤走，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开每一个相关的代码库，或者直接从&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">github&lt;/a>查看源码即可。&lt;/p>
&lt;h3 id="声明declarations">声明（Declarations）&lt;/h3>
&lt;p>属性方法是Rails中众多使用了元编程技术的案例之一。在元编程中，我们编写可以编写代码的代码。举例来说，&lt;code>attribute_method_suffix&lt;/code>后缀式方法是一个为每个属性都定义了一个helper方法的方法。在&lt;a href="https://blog.hackerpie.com/blog/2014/03/07/zhui-zong-bian-geng/">之前的讨论&lt;/a>中，ActiveModel使用这种方式为您的每一个属性都定义了一个&lt;code>_changed?&lt;/code>方法(&lt;strong>提示&lt;/strong>： 命令行中键入&lt;code>qw activemodel&lt;/code>查看代码)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">Dirty&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">include&lt;/span> ActiveModel::AttributeMethods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_method_suffix &lt;span style="font-style:italic">&amp;#39;_changed?&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_change&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_will_change!&amp;#39;&lt;/span>, &lt;span style="font-style:italic">&amp;#39;_was&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>让我们打开ActiveModel库中的&lt;code>attribute_methods.rb&lt;/code>文件，并且看一下到底发生了什么事情。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">def&lt;/span> attribute_method_suffix(*suffixes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.attribute_method_matchers += suffixes.map! &lt;span style="font-weight:bold">do&lt;/span> |suffix|
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AttributeMethodMatcher.new &lt;span style="font-style:italic">suffix&lt;/span>: suffix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当你调用&lt;code>attribute_method_suffix&lt;/code>方法的时候，每一个后缀都通过&lt;code>map!&lt;/code>方法转换为一个&lt;code>AttributeMethodMatcher&lt;/code>对象。这些对象会被存储在&lt;code>attribute_method_matchers&lt;/code>中。如果你重新看一下这个module的顶部，你会发现&lt;code>attribute_method_matchers&lt;/code>是在每一个包含此module的类中使用&lt;code>class_attribute&lt;/code>定义的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">module&lt;/span> &lt;span style="font-weight:bold">AttributeMethods&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="">extend&lt;/span> ActiveSupport::Concern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> included &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:attribute_aliases&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">:attribute_method_matchers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">instance_writer&lt;/span>: &lt;span style="">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>class_attribute&lt;/code>方法帮助你在类上定义属性。你可以这样在你自己的代码中这样使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class_attribute &lt;span style="font-style:italic">:database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">class&lt;/span> &lt;span style="font-weight:bold">Employee&lt;/span> &amp;lt; Person
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Person.database = Sql.new(&lt;span style="font-style:italic">:host&lt;/span>=&amp;gt;&lt;span style="font-style:italic">&amp;#39;localhost&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Employee.database &lt;span style="font-style:italic">#=&amp;gt; &amp;lt;Sql:host=&amp;#39;localhost&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ruby中并没有&lt;code>class_attribute&lt;/code>的内置实现，它是在ActiveSupport(&lt;strong>提示&lt;/strong>:命令行中键入&lt;code>qw activesupport&lt;/code>查看代码)中定义的方法。如果你对此比较好奇，可以简单看下&lt;code>attribute.rb&lt;/code>&lt;/p></description></item></channel></rss>