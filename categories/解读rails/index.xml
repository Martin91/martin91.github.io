<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>解读Rails on Hackerpie</title><link>https://blog.hackerpie.com/categories/%E8%A7%A3%E8%AF%BBrails/</link><description>Recent content in 解读Rails on Hackerpie</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 14 Oct 2017 22:29:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/categories/%E8%A7%A3%E8%AF%BBrails/index.xml" rel="self" type="application/rss+xml"/><item><title>解读 Rails: Migrations</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-migrations/</link><pubDate>Sat, 14 Oct 2017 22:29:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-migrations/</guid><description>&lt;p>此文翻译自&lt;a href="http://www.monkeyandcrow.com/blog/reading_rails_migrations/">Reading Rails - Migrations&lt;/a>，限于本人水平，翻译不当之处，敬请指教！&lt;/p>
&lt;p>今天我们将会探讨一下 Rails 经常被忽视的可靠的工作伙伴 —— Migrator。它是如何搜寻你的 migrations 并且执行它们的呢？我们将再一次慢慢地挖掘 Rails 的源代码，并在此过程中慧海拾珠。&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>为了跟随本文的步骤，请使用&lt;a href="https://github.com/adamsanderson/qwandry">qwandry&lt;/a>打开相关的代码库，或者直接在&lt;a href="https://github.com/rails/rails/tree/5505c1d700f17e2009e1189a7aa6dafafe7062a4">Github&lt;/a>上查看这些代码。&lt;/p>
&lt;h3 id="动身启程">动身启程&lt;/h3>
&lt;p>在展开讨论之前，此处并无特殊准备要求。或许你已经创建好了项目所需要的但是仍是空的数据库。如果你执行 &lt;code>rake db:migrate&lt;/code>，所有的未执行的 migrations 就会开始执行。让我们从查看 &lt;code>databases.rake&lt;/code> 里的 Rake 任务的源码开始动起来：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>desc &lt;span style="font-style:italic">&amp;#34;Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog).&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>task &lt;span style="font-style:italic">:migrate&lt;/span> =&amp;gt; [&lt;span style="font-style:italic">:environment&lt;/span>, &lt;span style="font-style:italic">:load_config&lt;/span>] &lt;span style="font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ActiveRecord::Migration.verbose = ENV[&lt;span style="font-style:italic">&amp;#34;VERBOSE&amp;#34;&lt;/span>] ? ENV[&lt;span style="font-style:italic">&amp;#34;VERBOSE&amp;#34;&lt;/span>] == &lt;span style="font-style:italic">&amp;#34;true&amp;#34;&lt;/span> : &lt;span style="">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ActiveRecord::Migrator.migrate(ActiveRecord::Migrator.migrations_paths, ENV[&lt;span style="font-style:italic">&amp;#34;VERSION&amp;#34;&lt;/span>] ? ENV[&lt;span style="font-style:italic">&amp;#34;VERSION&amp;#34;&lt;/span>].to_i : &lt;span style="">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="font-style:italic">#...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>虽然我们并不打算揭露 Rake 本身的工作机制，但是值得注意的是，执行 &lt;code>migrate&lt;/code> 要求另外两个任务 &lt;code>[:environment, :load_config]&lt;/code> 的首先执行。这能确保 Rails 的运行环境以及你的 &lt;code>database.yml&lt;/code> 文件被加载进来。&lt;/p>
&lt;p>上面的 rake 任务通过环境变量配置了 &lt;code>ActiveRecord::Migration&lt;/code> 以及 &lt;code>ActiveRecord::Migrator&lt;/code>。环境变量是一种非常有效的可用于向你的应用程序传递信息的方式。缺省地，诸如&lt;code>USER&lt;/code>的很多（环境）变量都是已经设置好的，他们也可以在每个（终端）命令执行时单独设置。举个例子，如果你通过 &lt;code>VERBOSE=false rake db:migrate&lt;/code> 调用了 Rake 任务，&lt;code>ENV[&amp;quot;VERBOSE&amp;quot;]&lt;/code>的值就会是字符串&lt;code>&amp;quot;false&amp;quot;&lt;/code>。&lt;/p></description></item></channel></rss>