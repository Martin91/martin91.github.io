<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>翻译 on Hackerpie</title><link>https://blog.hackerpie.com/categories/%E7%BF%BB%E8%AF%91/</link><description>Recent content in 翻译 on Hackerpie</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 14 Oct 2017 22:29:00 +0800</lastBuildDate><atom:link href="https://blog.hackerpie.com/categories/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml"/><item><title>解读 Rails: Migrations</title><link>https://blog.hackerpie.com/posts/archive/jie-du-rails-migrations/</link><pubDate>Sat, 14 Oct 2017 22:29:00 +0800</pubDate><guid>https://blog.hackerpie.com/posts/archive/jie-du-rails-migrations/</guid><description>此文翻译自Reading Rails - Migrations，限于本人水平，翻译不当之处，敬请指教！
今天我们将会探讨一下 Rails 经常被忽视的可靠的工作伙伴 —— Migrator。它是如何搜寻你的 migrations 并且执行它们的呢？我们将再一次慢慢地挖掘 Rails 的源代码，并在此过程中慧海拾珠。
为了跟随本文的步骤，请使用qwandry打开相关的代码库，或者直接在Github上查看这些代码。
动身启程 在展开讨论之前，此处并无特殊准备要求。或许你已经创建好了项目所需要的但是仍是空的数据库。如果你执行 rake db:migrate，所有的未执行的 migrations 就会开始执行。让我们从查看 databases.rake 里的 Rake 任务的源码开始动起来：
desc &amp;#34;Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog).&amp;#34; task :migrate =&amp;gt; [:environment, :load_config] do ActiveRecord::Migration.verbose = ENV[&amp;#34;VERBOSE&amp;#34;] ? ENV[&amp;#34;VERBOSE&amp;#34;] == &amp;#34;true&amp;#34; : true ActiveRecord::Migrator.migrate(ActiveRecord::Migrator.migrations_paths, ENV[&amp;#34;VERSION&amp;#34;] ? ENV[&amp;#34;VERSION&amp;#34;].to_i : nil) #... end 虽然我们并不打算揭露 Rake 本身的工作机制，但是值得注意的是，执行 migrate 要求另外两个任务 [:environment, :load_config] 的首先执行。这能确保 Rails 的运行环境以及你的 database.yml 文件被加载进来。
上面的 rake 任务通过环境变量配置了 ActiveRecord::Migration 以及 ActiveRecord::Migrator。环境变量是一种非常有效的可用于向你的应用程序传递信息的方式。缺省地，诸如USER的很多（环境）变量都是已经设置好的，他们也可以在每个（终端）命令执行时单独设置。举个例子，如果你通过 VERBOSE=false rake db:migrate 调用了 Rake 任务，ENV[&amp;quot;VERBOSE&amp;quot;]的值就会是字符串&amp;quot;false&amp;quot;。</description></item></channel></rss>